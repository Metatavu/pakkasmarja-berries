/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessToken,
  ClientRepresentation,
  ClientScopeRepresentation,
  CredentialRepresentation,
  GlobalRequestResult,
  IDToken,
  ManagementPermissionReference,
  ProtocolMapperEvaluationRepresentation,
  RoleRepresentation,
  UserRepresentation,
  UserSessionRepresentation,
} from '../models/index';
import {
    AccessTokenFromJSON,
    AccessTokenToJSON,
    ClientRepresentationFromJSON,
    ClientRepresentationToJSON,
    ClientScopeRepresentationFromJSON,
    ClientScopeRepresentationToJSON,
    CredentialRepresentationFromJSON,
    CredentialRepresentationToJSON,
    GlobalRequestResultFromJSON,
    GlobalRequestResultToJSON,
    IDTokenFromJSON,
    IDTokenToJSON,
    ManagementPermissionReferenceFromJSON,
    ManagementPermissionReferenceToJSON,
    ProtocolMapperEvaluationRepresentationFromJSON,
    ProtocolMapperEvaluationRepresentationToJSON,
    RoleRepresentationFromJSON,
    RoleRepresentationToJSON,
    UserRepresentationFromJSON,
    UserRepresentationToJSON,
    UserSessionRepresentationFromJSON,
    UserSessionRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmClientsClientUuidClientSecretGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidClientSecretPostRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidClientSecretRotatedDeleteRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidClientSecretRotatedGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteRequest {
    realm: string;
    clientUuid: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutRequest {
    realm: string;
    clientUuid: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientsClientUuidDefaultClientScopesGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidDeleteRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetRequest {
    realm: string;
    clientUuid: string;
    scope?: string;
    userId?: string;
}

export interface AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetRequest {
    realm: string;
    clientUuid: string;
    scope?: string;
    userId?: string;
}

export interface AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetRequest {
    realm: string;
    clientUuid: string;
    scope?: string;
    userId?: string;
}

export interface AdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetRequest {
    realm: string;
    clientUuid: string;
    scope?: string;
}

export interface AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetRequest {
    realm: string;
    clientUuid: string;
    roleContainerId: string;
    scope?: string;
}

export interface AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetRequest {
    realm: string;
    clientUuid: string;
    roleContainerId: string;
    scope?: string;
}

export interface AdminRealmsRealmClientsClientUuidGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetRequest {
    realm: string;
    clientUuid: string;
    providerId: string;
}

export interface AdminRealmsRealmClientsClientUuidManagementPermissionsGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidManagementPermissionsPutRequest {
    realm: string;
    clientUuid: string;
    managementPermissionReference?: ManagementPermissionReference;
}

export interface AdminRealmsRealmClientsClientUuidNodesNodeDeleteRequest {
    realm: string;
    clientUuid: string;
    node: string;
}

export interface AdminRealmsRealmClientsClientUuidNodesPostRequest {
    realm: string;
    clientUuid: string;
    requestBody?: { [key: string]: string; };
}

export interface AdminRealmsRealmClientsClientUuidOfflineSessionCountGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidOfflineSessionsGetRequest {
    realm: string;
    clientUuid: string;
    first?: number;
    max?: number;
}

export interface AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteRequest {
    realm: string;
    clientUuid: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutRequest {
    realm: string;
    clientUuid: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientsClientUuidOptionalClientScopesGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidPushRevocationPostRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidPutRequest {
    realm: string;
    clientUuid: string;
    clientRepresentation?: ClientRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidRegistrationAccessTokenPostRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidServiceAccountUserGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidSessionCountGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidTestNodesAvailableGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidUserSessionsGetRequest {
    realm: string;
    clientUuid: string;
    first?: number;
    max?: number;
}

export interface AdminRealmsRealmClientsGetRequest {
    realm: string;
    clientId?: string;
    first?: number;
    max?: number;
    q?: string;
    search?: boolean;
    viewableOnly?: boolean;
}

export interface AdminRealmsRealmClientsPostRequest {
    realm: string;
    clientRepresentation?: ClientRepresentation;
}

/**
 * 
 */
export class ClientsApi extends runtime.BaseAPI {

    /**
     * Get the client secret
     */
    async adminRealmsRealmClientsClientUuidClientSecretGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidClientSecretGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CredentialRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidClientSecretGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidClientSecretGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/client-secret`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialRepresentationFromJSON(jsonValue));
    }

    /**
     * Get the client secret
     */
    async adminRealmsRealmClientsClientUuidClientSecretGet(requestParameters: AdminRealmsRealmClientsClientUuidClientSecretGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CredentialRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidClientSecretGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a new secret for the client
     */
    async adminRealmsRealmClientsClientUuidClientSecretPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidClientSecretPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CredentialRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidClientSecretPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidClientSecretPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/client-secret`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialRepresentationFromJSON(jsonValue));
    }

    /**
     * Generate a new secret for the client
     */
    async adminRealmsRealmClientsClientUuidClientSecretPost(requestParameters: AdminRealmsRealmClientsClientUuidClientSecretPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CredentialRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidClientSecretPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invalidate the rotated secret for the client
     */
    async adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidClientSecretRotatedDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidClientSecretRotatedDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidClientSecretRotatedDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invalidate the rotated secret for the client
     */
    async adminRealmsRealmClientsClientUuidClientSecretRotatedDelete(requestParameters: AdminRealmsRealmClientsClientUuidClientSecretRotatedDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get the rotated client secret
     */
    async adminRealmsRealmClientsClientUuidClientSecretRotatedGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidClientSecretRotatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CredentialRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidClientSecretRotatedGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidClientSecretRotatedGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialRepresentationFromJSON(jsonValue));
    }

    /**
     * Get the rotated client secret
     */
    async adminRealmsRealmClientsClientUuidClientSecretRotatedGet(requestParameters: AdminRealmsRealmClientsClientUuidClientSecretRotatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CredentialRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidClientSecretRotatedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"clientScopeId"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete(requestParameters: AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutRaw(requestParameters: AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"clientScopeId"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut(requestParameters: AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get default client scopes.  Only name and ids are returned.
     */
    async adminRealmsRealmClientsClientUuidDefaultClientScopesGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidDefaultClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientScopeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidDefaultClientScopesGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidDefaultClientScopesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientScopeRepresentationFromJSON));
    }

    /**
     * Get default client scopes.  Only name and ids are returned.
     */
    async adminRealmsRealmClientsClientUuidDefaultClientScopesGet(requestParameters: AdminRealmsRealmClientsClientUuidDefaultClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientScopeRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidDefaultClientScopesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the client
     */
    async adminRealmsRealmClientsClientUuidDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the client
     */
    async adminRealmsRealmClientsClientUuidDelete(requestParameters: AdminRealmsRealmClientsClientUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create JSON with payload of example access token
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessToken>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-access-token`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenFromJSON(jsonValue));
    }

    /**
     * Create JSON with payload of example access token
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessToken> {
        const response = await this.adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create JSON with payload of example id token
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IDToken>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-id-token`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IDTokenFromJSON(jsonValue));
    }

    /**
     * Create JSON with payload of example id token
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IDToken> {
        const response = await this.adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create JSON with payload of example user info
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-userinfo`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create JSON with payload of example user info
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
     * Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProtocolMapperEvaluationRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/protocol-mappers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProtocolMapperEvaluationRepresentationFromJSON));
    }

    /**
     * This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
     * Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProtocolMapperEvaluationRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
     * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet().'
            );
        }

        if (requestParameters['roleContainerId'] == null) {
            throw new runtime.RequiredError(
                'roleContainerId',
                'Required parameter "roleContainerId" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/granted`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"roleContainerId"}}`, encodeURIComponent(String(requestParameters['roleContainerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
     * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
     * Get roles, which this client doesn\'t have scope for and can\'t have them in the accessToken issued for him.
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet().'
            );
        }

        if (requestParameters['roleContainerId'] == null) {
            throw new runtime.RequiredError(
                'roleContainerId',
                'Required parameter "roleContainerId" was null or undefined when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"roleContainerId"}}`, encodeURIComponent(String(requestParameters['roleContainerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
     * Get roles, which this client doesn\'t have scope for and can\'t have them in the accessToken issued for him.
     */
    async adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(requestParameters: AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get representation of the client
     */
    async adminRealmsRealmClientsClientUuidGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientRepresentationFromJSON(jsonValue));
    }

    /**
     * Get representation of the client
     */
    async adminRealmsRealmClientsClientUuidGet(requestParameters: AdminRealmsRealmClientsClientUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet().'
            );
        }

        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/installation/providers/{providerId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet(requestParameters: AdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmClientsClientUuidManagementPermissionsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidManagementPermissionsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidManagementPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmClientsClientUuidManagementPermissionsGet(requestParameters: AdminRealmsRealmClientsClientUuidManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmClientsClientUuidManagementPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmClientsClientUuidManagementPermissionsPutRaw(requestParameters: AdminRealmsRealmClientsClientUuidManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidManagementPermissionsPut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidManagementPermissionsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementPermissionReferenceToJSON(requestParameters['managementPermissionReference']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmClientsClientUuidManagementPermissionsPut(requestParameters: AdminRealmsRealmClientsClientUuidManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmClientsClientUuidManagementPermissionsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unregister a cluster node from the client
     */
    async adminRealmsRealmClientsClientUuidNodesNodeDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidNodesNodeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidNodesNodeDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidNodesNodeDelete().'
            );
        }

        if (requestParameters['node'] == null) {
            throw new runtime.RequiredError(
                'node',
                'Required parameter "node" was null or undefined when calling adminRealmsRealmClientsClientUuidNodesNodeDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/nodes/{node}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"node"}}`, encodeURIComponent(String(requestParameters['node']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unregister a cluster node from the client
     */
    async adminRealmsRealmClientsClientUuidNodesNodeDelete(requestParameters: AdminRealmsRealmClientsClientUuidNodesNodeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidNodesNodeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak
     */
    async adminRealmsRealmClientsClientUuidNodesPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidNodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidNodesPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidNodesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/nodes`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak
     */
    async adminRealmsRealmClientsClientUuidNodesPost(requestParameters: AdminRealmsRealmClientsClientUuidNodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidNodesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get application offline session count Returns a number of offline user sessions associated with this client { \"count\": number }
     */
    async adminRealmsRealmClientsClientUuidOfflineSessionCountGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidOfflineSessionCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidOfflineSessionCountGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidOfflineSessionCountGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/offline-session-count`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get application offline session count Returns a number of offline user sessions associated with this client { \"count\": number }
     */
    async adminRealmsRealmClientsClientUuidOfflineSessionCountGet(requestParameters: AdminRealmsRealmClientsClientUuidOfflineSessionCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.adminRealmsRealmClientsClientUuidOfflineSessionCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get offline sessions for client Returns a list of offline user sessions associated with this client
     */
    async adminRealmsRealmClientsClientUuidOfflineSessionsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidOfflineSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserSessionRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidOfflineSessionsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidOfflineSessionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/offline-sessions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserSessionRepresentationFromJSON));
    }

    /**
     * Get offline sessions for client Returns a list of offline user sessions associated with this client
     */
    async adminRealmsRealmClientsClientUuidOfflineSessionsGet(requestParameters: AdminRealmsRealmClientsClientUuidOfflineSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserSessionRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidOfflineSessionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"clientScopeId"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete(requestParameters: AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutRaw(requestParameters: AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"clientScopeId"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut(requestParameters: AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get optional client scopes.  Only name and ids are returned.
     */
    async adminRealmsRealmClientsClientUuidOptionalClientScopesGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidOptionalClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientScopeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidOptionalClientScopesGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidOptionalClientScopesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientScopeRepresentationFromJSON));
    }

    /**
     * Get optional client scopes.  Only name and ids are returned.
     */
    async adminRealmsRealmClientsClientUuidOptionalClientScopesGet(requestParameters: AdminRealmsRealmClientsClientUuidOptionalClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientScopeRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidOptionalClientScopesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Push the client\'s revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
     */
    async adminRealmsRealmClientsClientUuidPushRevocationPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidPushRevocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalRequestResult>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidPushRevocationPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidPushRevocationPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/push-revocation`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalRequestResultFromJSON(jsonValue));
    }

    /**
     * Push the client\'s revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
     */
    async adminRealmsRealmClientsClientUuidPushRevocationPost(requestParameters: AdminRealmsRealmClientsClientUuidPushRevocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalRequestResult> {
        const response = await this.adminRealmsRealmClientsClientUuidPushRevocationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the client
     */
    async adminRealmsRealmClientsClientUuidPutRaw(requestParameters: AdminRealmsRealmClientsClientUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidPut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientRepresentationToJSON(requestParameters['clientRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the client
     */
    async adminRealmsRealmClientsClientUuidPut(requestParameters: AdminRealmsRealmClientsClientUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidPutRaw(requestParameters, initOverrides);
    }

    /**
     * Generate a new registration access token for the client
     */
    async adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidRegistrationAccessTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRegistrationAccessTokenPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRegistrationAccessTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/registration-access-token`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientRepresentationFromJSON(jsonValue));
    }

    /**
     * Generate a new registration access token for the client
     */
    async adminRealmsRealmClientsClientUuidRegistrationAccessTokenPost(requestParameters: AdminRealmsRealmClientsClientUuidRegistrationAccessTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user dedicated to the service account
     */
    async adminRealmsRealmClientsClientUuidServiceAccountUserGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidServiceAccountUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidServiceAccountUserGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidServiceAccountUserGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/service-account-user`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRepresentationFromJSON(jsonValue));
    }

    /**
     * Get a user dedicated to the service account
     */
    async adminRealmsRealmClientsClientUuidServiceAccountUserGet(requestParameters: AdminRealmsRealmClientsClientUuidServiceAccountUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidServiceAccountUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get application session count Returns a number of user sessions associated with this client { \"count\": number }
     */
    async adminRealmsRealmClientsClientUuidSessionCountGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidSessionCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidSessionCountGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidSessionCountGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/session-count`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get application session count Returns a number of user sessions associated with this client { \"count\": number }
     */
    async adminRealmsRealmClientsClientUuidSessionCountGet(requestParameters: AdminRealmsRealmClientsClientUuidSessionCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.adminRealmsRealmClientsClientUuidSessionCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test if registered cluster nodes are available Tests availability by sending \'ping\' request to all cluster nodes.
     */
    async adminRealmsRealmClientsClientUuidTestNodesAvailableGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidTestNodesAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalRequestResult>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidTestNodesAvailableGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidTestNodesAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/test-nodes-available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalRequestResultFromJSON(jsonValue));
    }

    /**
     * Test if registered cluster nodes are available Tests availability by sending \'ping\' request to all cluster nodes.
     */
    async adminRealmsRealmClientsClientUuidTestNodesAvailableGet(requestParameters: AdminRealmsRealmClientsClientUuidTestNodesAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalRequestResult> {
        const response = await this.adminRealmsRealmClientsClientUuidTestNodesAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user sessions for client Returns a list of user sessions associated with this client 
     */
    async adminRealmsRealmClientsClientUuidUserSessionsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidUserSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserSessionRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidUserSessionsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidUserSessionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/user-sessions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserSessionRepresentationFromJSON));
    }

    /**
     * Get user sessions for client Returns a list of user sessions associated with this client 
     */
    async adminRealmsRealmClientsClientUuidUserSessionsGet(requestParameters: AdminRealmsRealmClientsClientUuidUserSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserSessionRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidUserSessionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.
     * Get clients belonging to the realm.
     */
    async adminRealmsRealmClientsGetRaw(requestParameters: AdminRealmsRealmClientsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clientId'] != null) {
            queryParameters['clientId'] = requestParameters['clientId'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['viewableOnly'] != null) {
            queryParameters['viewableOnly'] = requestParameters['viewableOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientRepresentationFromJSON));
    }

    /**
     * If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.
     * Get clients belonging to the realm.
     */
    async adminRealmsRealmClientsGet(requestParameters: AdminRealmsRealmClientsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientRepresentation>> {
        const response = await this.adminRealmsRealmClientsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new client Client’s client_id must be unique!
     */
    async adminRealmsRealmClientsPostRaw(requestParameters: AdminRealmsRealmClientsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientRepresentationToJSON(requestParameters['clientRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new client Client’s client_id must be unique!
     */
    async adminRealmsRealmClientsPost(requestParameters: AdminRealmsRealmClientsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsPostRaw(requestParameters, initOverrides);
    }

}
