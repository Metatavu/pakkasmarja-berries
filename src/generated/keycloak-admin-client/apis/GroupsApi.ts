/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupRepresentation,
  ManagementPermissionReference,
  UserRepresentation,
} from '../models/index';
import {
    GroupRepresentationFromJSON,
    GroupRepresentationToJSON,
    ManagementPermissionReferenceFromJSON,
    ManagementPermissionReferenceToJSON,
    UserRepresentationFromJSON,
    UserRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmGroupsCountGetRequest {
    realm: string;
    search?: string;
    top?: boolean;
}

export interface AdminRealmsRealmGroupsGetRequest {
    realm: string;
    briefRepresentation?: boolean;
    exact?: boolean;
    first?: number;
    max?: number;
    populateHierarchy?: boolean;
    q?: string;
    search?: string;
}

export interface AdminRealmsRealmGroupsGroupIdChildrenGetRequest {
    realm: string;
    groupId: string;
    briefRepresentation?: boolean;
    first?: number;
    max?: number;
}

export interface AdminRealmsRealmGroupsGroupIdChildrenPostRequest {
    realm: string;
    groupId: string;
    groupRepresentation?: GroupRepresentation;
}

export interface AdminRealmsRealmGroupsGroupIdDeleteRequest {
    realm: string;
    groupId: string;
}

export interface AdminRealmsRealmGroupsGroupIdGetRequest {
    realm: string;
    groupId: string;
}

export interface AdminRealmsRealmGroupsGroupIdManagementPermissionsGetRequest {
    realm: string;
    groupId: string;
}

export interface AdminRealmsRealmGroupsGroupIdManagementPermissionsPutRequest {
    realm: string;
    groupId: string;
    managementPermissionReference?: ManagementPermissionReference;
}

export interface AdminRealmsRealmGroupsGroupIdMembersGetRequest {
    realm: string;
    groupId: string;
    briefRepresentation?: boolean;
    first?: number;
    max?: number;
}

export interface AdminRealmsRealmGroupsGroupIdPutRequest {
    realm: string;
    groupId: string;
    groupRepresentation?: GroupRepresentation;
}

export interface AdminRealmsRealmGroupsPostRequest {
    realm: string;
    groupRepresentation?: GroupRepresentation;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Returns the groups counts.
     */
    async adminRealmsRealmGroupsCountGetRaw(requestParameters: AdminRealmsRealmGroupsCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsCountGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/count`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the groups counts.
     */
    async adminRealmsRealmGroupsCountGet(requestParameters: AdminRealmsRealmGroupsCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.adminRealmsRealmGroupsCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group hierarchy.  Only name and ids are returned.
     */
    async adminRealmsRealmGroupsGetRaw(requestParameters: AdminRealmsRealmGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['exact'] != null) {
            queryParameters['exact'] = requestParameters['exact'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['populateHierarchy'] != null) {
            queryParameters['populateHierarchy'] = requestParameters['populateHierarchy'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupRepresentationFromJSON));
    }

    /**
     * Get group hierarchy.  Only name and ids are returned.
     */
    async adminRealmsRealmGroupsGet(requestParameters: AdminRealmsRealmGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupRepresentation>> {
        const response = await this.adminRealmsRealmGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
     */
    async adminRealmsRealmGroupsGroupIdChildrenGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdChildrenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdChildrenGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdChildrenGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/children`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupRepresentationFromJSON));
    }

    /**
     * Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
     */
    async adminRealmsRealmGroupsGroupIdChildrenGet(requestParameters: AdminRealmsRealmGroupsGroupIdChildrenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupRepresentation>> {
        const response = await this.adminRealmsRealmGroupsGroupIdChildrenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will just set the parent if it exists. Create it and set the parent if the group doesnâ€™t exist.
     * Set or create child.
     */
    async adminRealmsRealmGroupsGroupIdChildrenPostRaw(requestParameters: AdminRealmsRealmGroupsGroupIdChildrenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdChildrenPost().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdChildrenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/children`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupRepresentationToJSON(requestParameters['groupRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will just set the parent if it exists. Create it and set the parent if the group doesnâ€™t exist.
     * Set or create child.
     */
    async adminRealmsRealmGroupsGroupIdChildrenPost(requestParameters: AdminRealmsRealmGroupsGroupIdChildrenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmGroupsGroupIdChildrenPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmGroupsGroupIdDeleteRaw(requestParameters: AdminRealmsRealmGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdDelete().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmGroupsGroupIdDelete(requestParameters: AdminRealmsRealmGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmGroupsGroupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmGroupsGroupIdGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmGroupsGroupIdGet(requestParameters: AdminRealmsRealmGroupsGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupRepresentation> {
        const response = await this.adminRealmsRealmGroupsGroupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmGroupsGroupIdManagementPermissionsGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdManagementPermissionsGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdManagementPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmGroupsGroupIdManagementPermissionsGet(requestParameters: AdminRealmsRealmGroupsGroupIdManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmGroupsGroupIdManagementPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmGroupsGroupIdManagementPermissionsPutRaw(requestParameters: AdminRealmsRealmGroupsGroupIdManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdManagementPermissionsPut().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdManagementPermissionsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementPermissionReferenceToJSON(requestParameters['managementPermissionReference']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmGroupsGroupIdManagementPermissionsPut(requestParameters: AdminRealmsRealmGroupsGroupIdManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmGroupsGroupIdManagementPermissionsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get users Returns a stream of users, filtered according to query parameters
     */
    async adminRealmsRealmGroupsGroupIdMembersGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdMembersGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdMembersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/members`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserRepresentationFromJSON));
    }

    /**
     * Get users Returns a stream of users, filtered according to query parameters
     */
    async adminRealmsRealmGroupsGroupIdMembersGet(requestParameters: AdminRealmsRealmGroupsGroupIdMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserRepresentation>> {
        const response = await this.adminRealmsRealmGroupsGroupIdMembersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update group, ignores subgroups.
     */
    async adminRealmsRealmGroupsGroupIdPutRaw(requestParameters: AdminRealmsRealmGroupsGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdPut().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupRepresentationToJSON(requestParameters['groupRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update group, ignores subgroups.
     */
    async adminRealmsRealmGroupsGroupIdPut(requestParameters: AdminRealmsRealmGroupsGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmGroupsGroupIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * This will update the group and set the parent if it exists. Create it and set the parent if the group doesnâ€™t exist.
     * create or add a top level realm groupSet or create child.
     */
    async adminRealmsRealmGroupsPostRaw(requestParameters: AdminRealmsRealmGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/groups`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupRepresentationToJSON(requestParameters['groupRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update the group and set the parent if it exists. Create it and set the parent if the group doesnâ€™t exist.
     * create or add a top level realm groupSet or create child.
     */
    async adminRealmsRealmGroupsPost(requestParameters: AdminRealmsRealmGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmGroupsPostRaw(requestParameters, initOverrides);
    }

}
