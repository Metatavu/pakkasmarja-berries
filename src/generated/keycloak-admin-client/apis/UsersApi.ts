/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CredentialRepresentation,
  FederatedIdentityRepresentation,
  GroupRepresentation,
  UPConfig,
  UserProfileMetadata,
  UserRepresentation,
  UserSessionRepresentation,
} from '../models/index';
import {
    CredentialRepresentationFromJSON,
    CredentialRepresentationToJSON,
    FederatedIdentityRepresentationFromJSON,
    FederatedIdentityRepresentationToJSON,
    GroupRepresentationFromJSON,
    GroupRepresentationToJSON,
    UPConfigFromJSON,
    UPConfigToJSON,
    UserProfileMetadataFromJSON,
    UserProfileMetadataToJSON,
    UserRepresentationFromJSON,
    UserRepresentationToJSON,
    UserSessionRepresentationFromJSON,
    UserSessionRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmUsersCountGetRequest {
    realm: string;
    email?: string;
    emailVerified?: boolean;
    enabled?: boolean;
    firstName?: string;
    lastName?: string;
    q?: string;
    search?: string;
    username?: string;
}

export interface AdminRealmsRealmUsersGetRequest {
    realm: string;
    briefRepresentation?: boolean;
    email?: string;
    emailVerified?: boolean;
    enabled?: boolean;
    exact?: boolean;
    first?: number;
    firstName?: string;
    idpAlias?: string;
    idpUserId?: string;
    lastName?: string;
    max?: number;
    q?: string;
    search?: string;
    username?: string;
}

export interface AdminRealmsRealmUsersPostRequest {
    realm: string;
    userRepresentation?: UserRepresentation;
}

export interface AdminRealmsRealmUsersProfileGetRequest {
    realm: string;
}

export interface AdminRealmsRealmUsersProfileMetadataGetRequest {
    realm: string;
}

export interface AdminRealmsRealmUsersProfilePutRequest {
    realm: string;
    uPConfig?: UPConfig;
}

export interface AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdConsentsClientDeleteRequest {
    realm: string;
    userId: string;
    client: string;
}

export interface AdminRealmsRealmUsersUserIdConsentsGetRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteRequest {
    realm: string;
    userId: string;
    credentialId: string;
}

export interface AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostRequest {
    realm: string;
    userId: string;
    credentialId: string;
    newPreviousCredentialId: string;
}

export interface AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostRequest {
    realm: string;
    userId: string;
    credentialId: string;
}

export interface AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutRequest {
    realm: string;
    userId: string;
    credentialId: string;
    body?: string;
}

export interface AdminRealmsRealmUsersUserIdCredentialsGetRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdDeleteRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdDisableCredentialTypesPutRequest {
    realm: string;
    userId: string;
    requestBody?: Array<string>;
}

export interface AdminRealmsRealmUsersUserIdExecuteActionsEmailPutRequest {
    realm: string;
    userId: string;
    clientId?: string;
    lifespan?: number;
    redirectUri?: string;
    requestBody?: Array<string>;
}

export interface AdminRealmsRealmUsersUserIdFederatedIdentityGetRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteRequest {
    realm: string;
    userId: string;
    provider: string;
}

export interface AdminRealmsRealmUsersUserIdFederatedIdentityProviderPostRequest {
    realm: string;
    userId: string;
    provider: string;
}

export interface AdminRealmsRealmUsersUserIdGetRequest {
    realm: string;
    userId: string;
    userProfileMetadata?: boolean;
}

export interface AdminRealmsRealmUsersUserIdGroupsCountGetRequest {
    realm: string;
    userId: string;
    search?: string;
}

export interface AdminRealmsRealmUsersUserIdGroupsGetRequest {
    realm: string;
    userId: string;
    briefRepresentation?: boolean;
    first?: number;
    max?: number;
    search?: string;
}

export interface AdminRealmsRealmUsersUserIdGroupsGroupIdDeleteRequest {
    realm: string;
    userId: string;
    groupId: string;
}

export interface AdminRealmsRealmUsersUserIdGroupsGroupIdPutRequest {
    realm: string;
    userId: string;
    groupId: string;
}

export interface AdminRealmsRealmUsersUserIdImpersonationPostRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdLogoutPostRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetRequest {
    realm: string;
    userId: string;
    clientUuid: string;
}

export interface AdminRealmsRealmUsersUserIdPutRequest {
    realm: string;
    userId: string;
    userRepresentation?: UserRepresentation;
}

export interface AdminRealmsRealmUsersUserIdResetPasswordEmailPutRequest {
    realm: string;
    userId: string;
    clientId?: string;
    redirectUri?: string;
}

export interface AdminRealmsRealmUsersUserIdResetPasswordPutRequest {
    realm: string;
    userId: string;
    credentialRepresentation?: CredentialRepresentation;
}

export interface AdminRealmsRealmUsersUserIdSendVerifyEmailPutRequest {
    realm: string;
    userId: string;
    clientId?: string;
    lifespan?: number;
    redirectUri?: string;
}

export interface AdminRealmsRealmUsersUserIdSessionsGetRequest {
    realm: string;
    userId: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * It can be called in three different ways. 1. Don’t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. <p> 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. <p> 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
     * Returns the number of users that match the given criteria.
     */
    async adminRealmsRealmUsersCountGetRaw(requestParameters: AdminRealmsRealmUsersCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersCountGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['emailVerified'] != null) {
            queryParameters['emailVerified'] = requestParameters['emailVerified'];
        }

        if (requestParameters['enabled'] != null) {
            queryParameters['enabled'] = requestParameters['enabled'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['firstName'] = requestParameters['firstName'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['lastName'] = requestParameters['lastName'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/count`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * It can be called in three different ways. 1. Don’t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. <p> 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. <p> 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
     * Returns the number of users that match the given criteria.
     */
    async adminRealmsRealmUsersCountGet(requestParameters: AdminRealmsRealmUsersCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.adminRealmsRealmUsersCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get users Returns a stream of users, filtered according to query parameters.
     */
    async adminRealmsRealmUsersGetRaw(requestParameters: AdminRealmsRealmUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['emailVerified'] != null) {
            queryParameters['emailVerified'] = requestParameters['emailVerified'];
        }

        if (requestParameters['enabled'] != null) {
            queryParameters['enabled'] = requestParameters['enabled'];
        }

        if (requestParameters['exact'] != null) {
            queryParameters['exact'] = requestParameters['exact'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['firstName'] = requestParameters['firstName'];
        }

        if (requestParameters['idpAlias'] != null) {
            queryParameters['idpAlias'] = requestParameters['idpAlias'];
        }

        if (requestParameters['idpUserId'] != null) {
            queryParameters['idpUserId'] = requestParameters['idpUserId'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['lastName'] = requestParameters['lastName'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserRepresentationFromJSON));
    }

    /**
     * Get users Returns a stream of users, filtered according to query parameters.
     */
    async adminRealmsRealmUsersGet(requestParameters: AdminRealmsRealmUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserRepresentation>> {
        const response = await this.adminRealmsRealmUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new user Username must be unique.
     */
    async adminRealmsRealmUsersPostRaw(requestParameters: AdminRealmsRealmUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRepresentationToJSON(requestParameters['userRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new user Username must be unique.
     */
    async adminRealmsRealmUsersPost(requestParameters: AdminRealmsRealmUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get the configuration for the user profile
     */
    async adminRealmsRealmUsersProfileGetRaw(requestParameters: AdminRealmsRealmUsersProfileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UPConfig>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersProfileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/profile`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UPConfigFromJSON(jsonValue));
    }

    /**
     * Get the configuration for the user profile
     */
    async adminRealmsRealmUsersProfileGet(requestParameters: AdminRealmsRealmUsersProfileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UPConfig> {
        const response = await this.adminRealmsRealmUsersProfileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the UserProfileMetadata from the configuration
     */
    async adminRealmsRealmUsersProfileMetadataGetRaw(requestParameters: AdminRealmsRealmUsersProfileMetadataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileMetadata>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersProfileMetadataGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/profile/metadata`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileMetadataFromJSON(jsonValue));
    }

    /**
     * Get the UserProfileMetadata from the configuration
     */
    async adminRealmsRealmUsersProfileMetadataGet(requestParameters: AdminRealmsRealmUsersProfileMetadataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileMetadata> {
        const response = await this.adminRealmsRealmUsersProfileMetadataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the configuration for the user profile
     */
    async adminRealmsRealmUsersProfilePutRaw(requestParameters: AdminRealmsRealmUsersProfilePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UPConfig>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersProfilePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/profile`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UPConfigToJSON(requestParameters['uPConfig']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UPConfigFromJSON(jsonValue));
    }

    /**
     * Set the configuration for the user profile
     */
    async adminRealmsRealmUsersProfilePut(requestParameters: AdminRealmsRealmUsersProfilePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UPConfig> {
        const response = await this.adminRealmsRealmUsersProfilePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returned values can contain for example \"password\", \"otp\" etc. This will always return empty list for \"local\" users, which are not backed by any user storage
     * Return credential types, which are provided by the user storage where user is stored.
     */
    async adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetRaw(requestParameters: AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/configured-user-storage-credential-types`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returned values can contain for example \"password\", \"otp\" etc. This will always return empty list for \"local\" users, which are not backed by any user storage
     * Return credential types, which are provided by the user storage where user is stored.
     */
    async adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet(requestParameters: AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke consent and offline tokens for particular client from user
     */
    async adminRealmsRealmUsersUserIdConsentsClientDeleteRaw(requestParameters: AdminRealmsRealmUsersUserIdConsentsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdConsentsClientDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdConsentsClientDelete().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmUsersUserIdConsentsClientDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/consents/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke consent and offline tokens for particular client from user
     */
    async adminRealmsRealmUsersUserIdConsentsClientDelete(requestParameters: AdminRealmsRealmUsersUserIdConsentsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdConsentsClientDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get consents granted by the user
     */
    async adminRealmsRealmUsersUserIdConsentsGetRaw(requestParameters: AdminRealmsRealmUsersUserIdConsentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdConsentsGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdConsentsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/consents`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get consents granted by the user
     */
    async adminRealmsRealmUsersUserIdConsentsGet(requestParameters: AdminRealmsRealmUsersUserIdConsentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.adminRealmsRealmUsersUserIdConsentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a credential for a user
     */
    async adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteRaw(requestParameters: AdminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete().'
            );
        }

        if (requestParameters['credentialId'] == null) {
            throw new runtime.RequiredError(
                'credentialId',
                'Required parameter "credentialId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/credentials/{credentialId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"credentialId"}}`, encodeURIComponent(String(requestParameters['credentialId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a credential for a user
     */
    async adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete(requestParameters: AdminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Move a credential to a position behind another credential
     */
    async adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostRaw(requestParameters: AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost().'
            );
        }

        if (requestParameters['credentialId'] == null) {
            throw new runtime.RequiredError(
                'credentialId',
                'Required parameter "credentialId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost().'
            );
        }

        if (requestParameters['newPreviousCredentialId'] == null) {
            throw new runtime.RequiredError(
                'newPreviousCredentialId',
                'Required parameter "newPreviousCredentialId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"credentialId"}}`, encodeURIComponent(String(requestParameters['credentialId']))).replace(`{${"newPreviousCredentialId"}}`, encodeURIComponent(String(requestParameters['newPreviousCredentialId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Move a credential to a position behind another credential
     */
    async adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(requestParameters: AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Move a credential to a first position in the credentials list of the user
     */
    async adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostRaw(requestParameters: AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost().'
            );
        }

        if (requestParameters['credentialId'] == null) {
            throw new runtime.RequiredError(
                'credentialId',
                'Required parameter "credentialId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/moveToFirst`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"credentialId"}}`, encodeURIComponent(String(requestParameters['credentialId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Move a credential to a first position in the credentials list of the user
     */
    async adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost(requestParameters: AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update a credential label for a user
     */
    async adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutRaw(requestParameters: AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut().'
            );
        }

        if (requestParameters['credentialId'] == null) {
            throw new runtime.RequiredError(
                'credentialId',
                'Required parameter "credentialId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/userLabel`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"credentialId"}}`, encodeURIComponent(String(requestParameters['credentialId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a credential label for a user
     */
    async adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut(requestParameters: AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmUsersUserIdCredentialsGetRaw(requestParameters: AdminRealmsRealmUsersUserIdCredentialsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CredentialRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdCredentialsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/credentials`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CredentialRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmUsersUserIdCredentialsGet(requestParameters: AdminRealmsRealmUsersUserIdCredentialsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CredentialRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdCredentialsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the user
     */
    async adminRealmsRealmUsersUserIdDeleteRaw(requestParameters: AdminRealmsRealmUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the user
     */
    async adminRealmsRealmUsersUserIdDelete(requestParameters: AdminRealmsRealmUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Disable all credentials for a user of a specific type
     */
    async adminRealmsRealmUsersUserIdDisableCredentialTypesPutRaw(requestParameters: AdminRealmsRealmUsersUserIdDisableCredentialTypesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdDisableCredentialTypesPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdDisableCredentialTypesPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/disable-credential-types`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable all credentials for a user of a specific type
     */
    async adminRealmsRealmUsersUserIdDisableCredentialTypesPut(requestParameters: AdminRealmsRealmUsersUserIdDisableCredentialTypesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdDisableCredentialTypesPutRaw(requestParameters, initOverrides);
    }

    /**
     * An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
     * Send an email to the user with a link they can click to execute particular actions.
     */
    async adminRealmsRealmUsersUserIdExecuteActionsEmailPutRaw(requestParameters: AdminRealmsRealmUsersUserIdExecuteActionsEmailPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdExecuteActionsEmailPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdExecuteActionsEmailPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        if (requestParameters['lifespan'] != null) {
            queryParameters['lifespan'] = requestParameters['lifespan'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirectUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/execute-actions-email`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
     * Send an email to the user with a link they can click to execute particular actions.
     */
    async adminRealmsRealmUsersUserIdExecuteActionsEmailPut(requestParameters: AdminRealmsRealmUsersUserIdExecuteActionsEmailPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdExecuteActionsEmailPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get social logins associated with the user
     */
    async adminRealmsRealmUsersUserIdFederatedIdentityGetRaw(requestParameters: AdminRealmsRealmUsersUserIdFederatedIdentityGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FederatedIdentityRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdFederatedIdentityGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdFederatedIdentityGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/federated-identity`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FederatedIdentityRepresentationFromJSON));
    }

    /**
     * Get social logins associated with the user
     */
    async adminRealmsRealmUsersUserIdFederatedIdentityGet(requestParameters: AdminRealmsRealmUsersUserIdFederatedIdentityGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FederatedIdentityRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdFederatedIdentityGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a social login provider from user
     */
    async adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteRaw(requestParameters: AdminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/federated-identity/{provider}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a social login provider from user
     */
    async adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete(requestParameters: AdminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add a social login provider to the user
     */
    async adminRealmsRealmUsersUserIdFederatedIdentityProviderPostRaw(requestParameters: AdminRealmsRealmUsersUserIdFederatedIdentityProviderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderPost().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/federated-identity/{provider}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a social login provider to the user
     */
    async adminRealmsRealmUsersUserIdFederatedIdentityProviderPost(requestParameters: AdminRealmsRealmUsersUserIdFederatedIdentityProviderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdFederatedIdentityProviderPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get representation of the user
     */
    async adminRealmsRealmUsersUserIdGetRaw(requestParameters: AdminRealmsRealmUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userProfileMetadata'] != null) {
            queryParameters['userProfileMetadata'] = requestParameters['userProfileMetadata'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRepresentationFromJSON(jsonValue));
    }

    /**
     * Get representation of the user
     */
    async adminRealmsRealmUsersUserIdGet(requestParameters: AdminRealmsRealmUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRepresentation> {
        const response = await this.adminRealmsRealmUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmUsersUserIdGroupsCountGetRaw(requestParameters: AdminRealmsRealmUsersUserIdGroupsCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsCountGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsCountGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/groups/count`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminRealmsRealmUsersUserIdGroupsCountGet(requestParameters: AdminRealmsRealmUsersUserIdGroupsCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.adminRealmsRealmUsersUserIdGroupsCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmUsersUserIdGroupsGetRaw(requestParameters: AdminRealmsRealmUsersUserIdGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/groups`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmUsersUserIdGroupsGet(requestParameters: AdminRealmsRealmUsersUserIdGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmUsersUserIdGroupsGroupIdDeleteRaw(requestParameters: AdminRealmsRealmUsersUserIdGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsGroupIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsGroupIdDelete().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/groups/{groupId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmUsersUserIdGroupsGroupIdDelete(requestParameters: AdminRealmsRealmUsersUserIdGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdGroupsGroupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmUsersUserIdGroupsGroupIdPutRaw(requestParameters: AdminRealmsRealmUsersUserIdGroupsGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsGroupIdPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsGroupIdPut().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmUsersUserIdGroupsGroupIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/groups/{groupId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmUsersUserIdGroupsGroupIdPut(requestParameters: AdminRealmsRealmUsersUserIdGroupsGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdGroupsGroupIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Impersonate the user
     */
    async adminRealmsRealmUsersUserIdImpersonationPostRaw(requestParameters: AdminRealmsRealmUsersUserIdImpersonationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdImpersonationPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdImpersonationPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/impersonation`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Impersonate the user
     */
    async adminRealmsRealmUsersUserIdImpersonationPost(requestParameters: AdminRealmsRealmUsersUserIdImpersonationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.adminRealmsRealmUsersUserIdImpersonationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
     */
    async adminRealmsRealmUsersUserIdLogoutPostRaw(requestParameters: AdminRealmsRealmUsersUserIdLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdLogoutPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdLogoutPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/logout`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
     */
    async adminRealmsRealmUsersUserIdLogoutPost(requestParameters: AdminRealmsRealmUsersUserIdLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdLogoutPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get offline sessions associated with the user and client
     */
    async adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetRaw(requestParameters: AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserSessionRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/offline-sessions/{clientUuid}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"clientUuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserSessionRepresentationFromJSON));
    }

    /**
     * Get offline sessions associated with the user and client
     */
    async adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet(requestParameters: AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserSessionRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the user
     */
    async adminRealmsRealmUsersUserIdPutRaw(requestParameters: AdminRealmsRealmUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserRepresentationToJSON(requestParameters['userRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the user
     */
    async adminRealmsRealmUsersUserIdPut(requestParameters: AdminRealmsRealmUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
     * Send an email to the user with a link they can click to reset their password.
     * @deprecated
     */
    async adminRealmsRealmUsersUserIdResetPasswordEmailPutRaw(requestParameters: AdminRealmsRealmUsersUserIdResetPasswordEmailPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdResetPasswordEmailPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdResetPasswordEmailPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirectUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/reset-password-email`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
     * Send an email to the user with a link they can click to reset their password.
     * @deprecated
     */
    async adminRealmsRealmUsersUserIdResetPasswordEmailPut(requestParameters: AdminRealmsRealmUsersUserIdResetPasswordEmailPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdResetPasswordEmailPutRaw(requestParameters, initOverrides);
    }

    /**
     * Set up a new password for the user.
     */
    async adminRealmsRealmUsersUserIdResetPasswordPutRaw(requestParameters: AdminRealmsRealmUsersUserIdResetPasswordPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdResetPasswordPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdResetPasswordPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/reset-password`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CredentialRepresentationToJSON(requestParameters['credentialRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set up a new password for the user.
     */
    async adminRealmsRealmUsersUserIdResetPasswordPut(requestParameters: AdminRealmsRealmUsersUserIdResetPasswordPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdResetPasswordPutRaw(requestParameters, initOverrides);
    }

    /**
     * The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
     * Send an email-verification email to the user An email contains a link the user can click to verify their email address.
     */
    async adminRealmsRealmUsersUserIdSendVerifyEmailPutRaw(requestParameters: AdminRealmsRealmUsersUserIdSendVerifyEmailPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdSendVerifyEmailPut().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdSendVerifyEmailPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        if (requestParameters['lifespan'] != null) {
            queryParameters['lifespan'] = requestParameters['lifespan'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirectUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/send-verify-email`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
     * Send an email-verification email to the user An email contains a link the user can click to verify their email address.
     */
    async adminRealmsRealmUsersUserIdSendVerifyEmailPut(requestParameters: AdminRealmsRealmUsersUserIdSendVerifyEmailPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdSendVerifyEmailPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get sessions associated with the user
     */
    async adminRealmsRealmUsersUserIdSessionsGetRaw(requestParameters: AdminRealmsRealmUsersUserIdSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserSessionRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdSessionsGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdSessionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/sessions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserSessionRepresentationFromJSON));
    }

    /**
     * Get sessions associated with the user
     */
    async adminRealmsRealmUsersUserIdSessionsGet(requestParameters: AdminRealmsRealmUsersUserIdSessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserSessionRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdSessionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
