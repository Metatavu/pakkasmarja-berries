/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface AdminRealmsRealmAttackDetectionBruteForceUsersDeleteRequest {
    realm: string;
}

export interface AdminRealmsRealmAttackDetectionBruteForceUsersUserIdDeleteRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmAttackDetectionBruteForceUsersUserIdGetRequest {
    realm: string;
    userId: string;
}

/**
 * 
 */
export class AttackDetectionApi extends runtime.BaseAPI {

    /**
     * Clear any user login failures for all users This can release temporary disabled users
     */
    async adminRealmsRealmAttackDetectionBruteForceUsersDeleteRaw(requestParameters: AdminRealmsRealmAttackDetectionBruteForceUsersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAttackDetectionBruteForceUsersDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/attack-detection/brute-force/users`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Clear any user login failures for all users This can release temporary disabled users
     */
    async adminRealmsRealmAttackDetectionBruteForceUsersDelete(requestParameters: AdminRealmsRealmAttackDetectionBruteForceUsersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAttackDetectionBruteForceUsersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Clear any user login failures for the user This can release temporary disabled user
     */
    async adminRealmsRealmAttackDetectionBruteForceUsersUserIdDeleteRaw(requestParameters: AdminRealmsRealmAttackDetectionBruteForceUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAttackDetectionBruteForceUsersUserIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmAttackDetectionBruteForceUsersUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/attack-detection/brute-force/users/{userId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Clear any user login failures for the user This can release temporary disabled user
     */
    async adminRealmsRealmAttackDetectionBruteForceUsersUserIdDelete(requestParameters: AdminRealmsRealmAttackDetectionBruteForceUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAttackDetectionBruteForceUsersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get status of a username in brute force detection
     */
    async adminRealmsRealmAttackDetectionBruteForceUsersUserIdGetRaw(requestParameters: AdminRealmsRealmAttackDetectionBruteForceUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAttackDetectionBruteForceUsersUserIdGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmAttackDetectionBruteForceUsersUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/attack-detection/brute-force/users/{userId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get status of a username in brute force detection
     */
    async adminRealmsRealmAttackDetectionBruteForceUsersUserIdGet(requestParameters: AdminRealmsRealmAttackDetectionBruteForceUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.adminRealmsRealmAttackDetectionBruteForceUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
