/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProtocolMapperRepresentation,
} from '../models/index';
import {
    ProtocolMapperRepresentationFromJSON,
    ProtocolMapperRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostRequest {
    realm: string;
    clientScopeId: string;
    protocolMapperRepresentation?: Array<ProtocolMapperRepresentation>;
}

export interface AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteRequest {
    realm: string;
    clientScopeId: string;
    id: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetRequest {
    realm: string;
    clientScopeId: string;
    id: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutRequest {
    realm: string;
    clientScopeId: string;
    id: string;
    protocolMapperRepresentation?: ProtocolMapperRepresentation;
}

export interface AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostRequest {
    realm: string;
    clientScopeId: string;
    protocolMapperRepresentation?: ProtocolMapperRepresentation;
}

export interface AdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetRequest {
    realm: string;
    clientScopeId: string;
    protocol: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostRequest {
    realm: string;
    clientScopeId: string;
    protocolMapperRepresentation?: Array<ProtocolMapperRepresentation>;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteRequest {
    realm: string;
    clientScopeId: string;
    id: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetRequest {
    realm: string;
    clientScopeId: string;
    id: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutRequest {
    realm: string;
    clientScopeId: string;
    id: string;
    protocolMapperRepresentation?: ProtocolMapperRepresentation;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostRequest {
    realm: string;
    clientScopeId: string;
    protocolMapperRepresentation?: ProtocolMapperRepresentation;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetRequest {
    realm: string;
    clientScopeId: string;
    protocol: string;
}

export interface AdminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostRequest {
    realm: string;
    clientUuid: string;
    protocolMapperRepresentation?: Array<ProtocolMapperRepresentation>;
}

export interface AdminRealmsRealmClientsClientUuidProtocolMappersModelsGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteRequest {
    realm: string;
    clientUuid: string;
    id: string;
}

export interface AdminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetRequest {
    realm: string;
    clientUuid: string;
    id: string;
}

export interface AdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutRequest {
    realm: string;
    clientUuid: string;
    id: string;
    protocolMapperRepresentation?: ProtocolMapperRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidProtocolMappersModelsPostRequest {
    realm: string;
    clientUuid: string;
    protocolMapperRepresentation?: ProtocolMapperRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetRequest {
    realm: string;
    clientUuid: string;
    protocol: string;
}

/**
 * 
 */
export class ProtocolMappersApi extends runtime.BaseAPI {

    /**
     * Create multiple mappers
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/add-models`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['protocolMapperRepresentation']!.map(ProtocolMapperRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create multiple mappers
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get mappers
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProtocolMapperRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProtocolMapperRepresentationFromJSON));
    }

    /**
     * Get mappers
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProtocolMapperRepresentation>> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the mapper
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the mapper
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get mapper by id
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProtocolMapperRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProtocolMapperRepresentationFromJSON(jsonValue));
    }

    /**
     * Get mapper by id
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProtocolMapperRepresentation> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the mapper
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProtocolMapperRepresentationToJSON(requestParameters['protocolMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the mapper
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create a mapper
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProtocolMapperRepresentationToJSON(requestParameters['protocolMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a mapper
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get mappers by name for a specific protocol
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProtocolMapperRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet().'
            );
        }

        if (requestParameters['protocol'] == null) {
            throw new runtime.RequiredError(
                'protocol',
                'Required parameter "protocol" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/protocol/{protocol}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"protocol"}}`, encodeURIComponent(String(requestParameters['protocol']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProtocolMapperRepresentationFromJSON));
    }

    /**
     * Get mappers by name for a specific protocol
     */
    async adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProtocolMapperRepresentation>> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple mappers
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/add-models`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['protocolMapperRepresentation']!.map(ProtocolMapperRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create multiple mappers
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get mappers
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProtocolMapperRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProtocolMapperRepresentationFromJSON));
    }

    /**
     * Get mappers
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProtocolMapperRepresentation>> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the mapper
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the mapper
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get mapper by id
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProtocolMapperRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProtocolMapperRepresentationFromJSON(jsonValue));
    }

    /**
     * Get mapper by id
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProtocolMapperRepresentation> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the mapper
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProtocolMapperRepresentationToJSON(requestParameters['protocolMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the mapper
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create a mapper
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProtocolMapperRepresentationToJSON(requestParameters['protocolMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a mapper
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get mappers by name for a specific protocol
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProtocolMapperRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet().'
            );
        }

        if (requestParameters['protocol'] == null) {
            throw new runtime.RequiredError(
                'protocol',
                'Required parameter "protocol" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/protocol/{protocol}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"protocol"}}`, encodeURIComponent(String(requestParameters['protocol']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProtocolMapperRepresentationFromJSON));
    }

    /**
     * Get mappers by name for a specific protocol
     */
    async adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProtocolMapperRepresentation>> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple mappers
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/add-models`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['protocolMapperRepresentation']!.map(ProtocolMapperRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create multiple mappers
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get mappers
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProtocolMapperRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProtocolMapperRepresentationFromJSON));
    }

    /**
     * Get mappers
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsGet(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProtocolMapperRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidProtocolMappersModelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the mapper
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the mapper
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get mapper by id
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProtocolMapperRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProtocolMapperRepresentationFromJSON(jsonValue));
    }

    /**
     * Get mapper by id
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProtocolMapperRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the mapper
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutRaw(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProtocolMapperRepresentationToJSON(requestParameters['protocolMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the mapper
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create a mapper
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProtocolMapperRepresentationToJSON(requestParameters['protocolMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a mapper
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersModelsPost(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidProtocolMappersModelsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get mappers by name for a specific protocol
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProtocolMapperRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet().'
            );
        }

        if (requestParameters['protocol'] == null) {
            throw new runtime.RequiredError(
                'protocol',
                'Required parameter "protocol" was null or undefined when calling adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/protocol/{protocol}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"protocol"}}`, encodeURIComponent(String(requestParameters['protocol']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProtocolMapperRepresentationFromJSON));
    }

    /**
     * Get mappers by name for a specific protocol
     */
    async adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet(requestParameters: AdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProtocolMapperRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
