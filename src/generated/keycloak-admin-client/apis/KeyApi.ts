/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  KeysMetadataRepresentation,
} from '../models/index';
import {
    KeysMetadataRepresentationFromJSON,
    KeysMetadataRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmKeysGetRequest {
    realm: string;
}

/**
 * 
 */
export class KeyApi extends runtime.BaseAPI {

    /**
     */
    async adminRealmsRealmKeysGetRaw(requestParameters: AdminRealmsRealmKeysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeysMetadataRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmKeysGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/keys`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeysMetadataRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmKeysGet(requestParameters: AdminRealmsRealmKeysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeysMetadataRepresentation> {
        const response = await this.adminRealmsRealmKeysGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
