/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IdentityProviderMapperRepresentation,
  IdentityProviderMapperTypeRepresentation,
  IdentityProviderRepresentation,
  ManagementPermissionReference,
} from '../models/index';
import {
    IdentityProviderMapperRepresentationFromJSON,
    IdentityProviderMapperRepresentationToJSON,
    IdentityProviderMapperTypeRepresentationFromJSON,
    IdentityProviderMapperTypeRepresentationToJSON,
    IdentityProviderRepresentationFromJSON,
    IdentityProviderRepresentationToJSON,
    ManagementPermissionReferenceFromJSON,
    ManagementPermissionReferenceToJSON,
} from '../models/index';

export interface AdminRealmsRealmIdentityProviderImportConfigPostRequest {
    realm: string;
    requestBody?: { [key: string]: any; };
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasDeleteRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest {
    realm: string;
    alias: string;
    format?: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasGetRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest {
    realm: string;
    alias: string;
    managementPermissionReference?: ManagementPermissionReference;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest {
    realm: string;
    alias: string;
    id: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest {
    realm: string;
    alias: string;
    id: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest {
    realm: string;
    alias: string;
    id: string;
    identityProviderMapperRepresentation?: IdentityProviderMapperRepresentation;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest {
    realm: string;
    alias: string;
    identityProviderMapperRepresentation?: IdentityProviderMapperRepresentation;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasPutRequest {
    realm: string;
    alias: string;
    identityProviderRepresentation?: IdentityProviderRepresentation;
}

export interface AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesGetRequest {
    realm: string;
    briefRepresentation?: boolean;
    first?: number;
    max?: number;
    search?: string;
}

export interface AdminRealmsRealmIdentityProviderInstancesPostRequest {
    realm: string;
    identityProviderRepresentation?: IdentityProviderRepresentation;
}

export interface AdminRealmsRealmIdentityProviderProvidersProviderIdGetRequest {
    realm: string;
    providerId: string;
}

/**
 * 
 */
export class IdentityProvidersApi extends runtime.BaseAPI {

    /**
     * Import identity provider from uploaded JSON file
     * Import identity provider from JSON body
     */
    async adminRealmsRealmIdentityProviderImportConfigPostRaw(requestParameters: AdminRealmsRealmIdentityProviderImportConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderImportConfigPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/import-config`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Import identity provider from uploaded JSON file
     * Import identity provider from JSON body
     */
    async adminRealmsRealmIdentityProviderImportConfigPost(requestParameters: AdminRealmsRealmIdentityProviderImportConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.adminRealmsRealmIdentityProviderImportConfigPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasDeleteRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasDelete().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasDelete(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmIdentityProviderInstancesAliasDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Export public broker configuration for identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasExportGetRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasExportGet().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasExportGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/export`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export public broker configuration for identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasExportGet(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmIdentityProviderInstancesAliasExportGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasGetRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasGet().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderRepresentationFromJSON(jsonValue));
    }

    /**
     * Get the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasGet(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderRepresentation> {
        const response = await this.adminRealmsRealmIdentityProviderInstancesAliasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementPermissionReferenceToJSON(requestParameters['managementPermissionReference']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get mapper types for identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: IdentityProviderMapperTypeRepresentation; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/mapper-types`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, IdentityProviderMapperTypeRepresentationFromJSON));
    }

    /**
     * Get mapper types for identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: IdentityProviderMapperTypeRepresentation; }> {
        const response = await this.adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get mappers for identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersGetRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdentityProviderMapperRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersGet().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/mappers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityProviderMapperRepresentationFromJSON));
    }

    /**
     * Get mappers for identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersGet(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdentityProviderMapperRepresentation>> {
        const response = await this.adminRealmsRealmIdentityProviderInstancesAliasMappersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a mapper for the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a mapper for the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get mapper by id for the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderMapperRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderMapperRepresentationFromJSON(jsonValue));
    }

    /**
     * Get mapper by id for the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderMapperRepresentation> {
        const response = await this.adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a mapper for the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityProviderMapperRepresentationToJSON(requestParameters['identityProviderMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a mapper for the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Add a mapper to identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersPostRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersPost().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasMappersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/mappers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityProviderMapperRepresentationToJSON(requestParameters['identityProviderMapperRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a mapper to identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasMappersPost(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmIdentityProviderInstancesAliasMappersPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasPutRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasPut().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityProviderRepresentationToJSON(requestParameters['identityProviderRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesAliasPut(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmIdentityProviderInstancesAliasPutRaw(requestParameters, initOverrides);
    }

    /**
     * Reaload keys for the identity provider if the provider supports it, \"true\" is returned if reload was performed, \"false\" if not.
     */
    async adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances/{alias}/reload-keys`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reaload keys for the identity provider if the provider supports it, \"true\" is returned if reload was performed, \"false\" if not.
     */
    async adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet(requestParameters: AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List identity providers
     */
    async adminRealmsRealmIdentityProviderInstancesGetRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdentityProviderRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityProviderRepresentationFromJSON));
    }

    /**
     * List identity providers
     */
    async adminRealmsRealmIdentityProviderInstancesGet(requestParameters: AdminRealmsRealmIdentityProviderInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdentityProviderRepresentation>> {
        const response = await this.adminRealmsRealmIdentityProviderInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesPostRaw(requestParameters: AdminRealmsRealmIdentityProviderInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderInstancesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/instances`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityProviderRepresentationToJSON(requestParameters['identityProviderRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new identity provider
     */
    async adminRealmsRealmIdentityProviderInstancesPost(requestParameters: AdminRealmsRealmIdentityProviderInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmIdentityProviderInstancesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get the identity provider factory for that provider id
     */
    async adminRealmsRealmIdentityProviderProvidersProviderIdGetRaw(requestParameters: AdminRealmsRealmIdentityProviderProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmIdentityProviderProvidersProviderIdGet().'
            );
        }

        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling adminRealmsRealmIdentityProviderProvidersProviderIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/identity-provider/providers/{provider_id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"provider_id"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the identity provider factory for that provider id
     */
    async adminRealmsRealmIdentityProviderProvidersProviderIdGet(requestParameters: AdminRealmsRealmIdentityProviderProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.adminRealmsRealmIdentityProviderProvidersProviderIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
