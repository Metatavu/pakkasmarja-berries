/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticationExecutionInfoRepresentation,
  AuthenticationExecutionRepresentation,
  AuthenticationFlowRepresentation,
  AuthenticatorConfigInfoRepresentation,
  AuthenticatorConfigRepresentation,
  ConfigPropertyRepresentation,
  RequiredActionProviderRepresentation,
} from '../models/index';
import {
    AuthenticationExecutionInfoRepresentationFromJSON,
    AuthenticationExecutionInfoRepresentationToJSON,
    AuthenticationExecutionRepresentationFromJSON,
    AuthenticationExecutionRepresentationToJSON,
    AuthenticationFlowRepresentationFromJSON,
    AuthenticationFlowRepresentationToJSON,
    AuthenticatorConfigInfoRepresentationFromJSON,
    AuthenticatorConfigInfoRepresentationToJSON,
    AuthenticatorConfigRepresentationFromJSON,
    AuthenticatorConfigRepresentationToJSON,
    ConfigPropertyRepresentationFromJSON,
    ConfigPropertyRepresentationToJSON,
    RequiredActionProviderRepresentationFromJSON,
    RequiredActionProviderRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmAuthenticationAuthenticatorProvidersGetRequest {
    realm: string;
}

export interface AdminRealmsRealmAuthenticationClientAuthenticatorProvidersGetRequest {
    realm: string;
}

export interface AdminRealmsRealmAuthenticationConfigDescriptionProviderIdGetRequest {
    realm: string;
    providerId: string;
}

export interface AdminRealmsRealmAuthenticationConfigIdDeleteRequest {
    realm: string;
    id: string;
}

export interface AdminRealmsRealmAuthenticationConfigIdGetRequest {
    realm: string;
    id: string;
}

export interface AdminRealmsRealmAuthenticationConfigIdPutRequest {
    realm: string;
    id: string;
    authenticatorConfigRepresentation?: AuthenticatorConfigRepresentation;
}

export interface AdminRealmsRealmAuthenticationConfigPostRequest {
    realm: string;
    authenticatorConfigRepresentation?: AuthenticatorConfigRepresentation;
}

export interface AdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetRequest {
    realm: string;
    executionId: string;
    id: string;
}

export interface AdminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostRequest {
    realm: string;
    executionId: string;
    authenticatorConfigRepresentation?: AuthenticatorConfigRepresentation;
}

export interface AdminRealmsRealmAuthenticationExecutionsExecutionIdDeleteRequest {
    realm: string;
    executionId: string;
}

export interface AdminRealmsRealmAuthenticationExecutionsExecutionIdGetRequest {
    realm: string;
    executionId: string;
}

export interface AdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostRequest {
    realm: string;
    executionId: string;
}

export interface AdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostRequest {
    realm: string;
    executionId: string;
}

export interface AdminRealmsRealmAuthenticationExecutionsPostRequest {
    realm: string;
    authenticationExecutionRepresentation?: AuthenticationExecutionRepresentation;
}

export interface AdminRealmsRealmAuthenticationFlowsFlowAliasCopyPostRequest {
    realm: string;
    flowAlias: string;
    requestBody?: { [key: string]: string; };
}

export interface AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostRequest {
    realm: string;
    flowAlias: string;
    requestBody?: { [key: string]: string; };
}

export interface AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostRequest {
    realm: string;
    flowAlias: string;
    requestBody?: { [key: string]: string; };
}

export interface AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetRequest {
    realm: string;
    flowAlias: string;
}

export interface AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutRequest {
    realm: string;
    flowAlias: string;
    authenticationExecutionInfoRepresentation?: AuthenticationExecutionInfoRepresentation;
}

export interface AdminRealmsRealmAuthenticationFlowsGetRequest {
    realm: string;
}

export interface AdminRealmsRealmAuthenticationFlowsIdDeleteRequest {
    realm: string;
    id: string;
}

export interface AdminRealmsRealmAuthenticationFlowsIdGetRequest {
    realm: string;
    id: string;
}

export interface AdminRealmsRealmAuthenticationFlowsIdPutRequest {
    realm: string;
    id: string;
    authenticationFlowRepresentation?: AuthenticationFlowRepresentation;
}

export interface AdminRealmsRealmAuthenticationFlowsPostRequest {
    realm: string;
    authenticationFlowRepresentation?: AuthenticationFlowRepresentation;
}

export interface AdminRealmsRealmAuthenticationFormActionProvidersGetRequest {
    realm: string;
}

export interface AdminRealmsRealmAuthenticationFormProvidersGetRequest {
    realm: string;
}

export interface AdminRealmsRealmAuthenticationPerClientConfigDescriptionGetRequest {
    realm: string;
}

export interface AdminRealmsRealmAuthenticationRegisterRequiredActionPostRequest {
    realm: string;
    requestBody?: { [key: string]: string; };
}

export interface AdminRealmsRealmAuthenticationRequiredActionsAliasDeleteRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmAuthenticationRequiredActionsAliasGetRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmAuthenticationRequiredActionsAliasPutRequest {
    realm: string;
    alias: string;
    requiredActionProviderRepresentation?: RequiredActionProviderRepresentation;
}

export interface AdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostRequest {
    realm: string;
    alias: string;
}

export interface AdminRealmsRealmAuthenticationRequiredActionsGetRequest {
    realm: string;
}

export interface AdminRealmsRealmAuthenticationUnregisteredRequiredActionsGetRequest {
    realm: string;
}

/**
 * 
 */
export class AuthenticationManagementApi extends runtime.BaseAPI {

    /**
     * Get authenticator providers Returns a stream of authenticator providers.
     */
    async adminRealmsRealmAuthenticationAuthenticatorProvidersGetRaw(requestParameters: AdminRealmsRealmAuthenticationAuthenticatorProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationAuthenticatorProvidersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/authenticator-providers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get authenticator providers Returns a stream of authenticator providers.
     */
    async adminRealmsRealmAuthenticationAuthenticatorProvidersGet(requestParameters: AdminRealmsRealmAuthenticationAuthenticatorProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.adminRealmsRealmAuthenticationAuthenticatorProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get client authenticator providers Returns a stream of client authenticator providers.
     */
    async adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetRaw(requestParameters: AdminRealmsRealmAuthenticationClientAuthenticatorProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationClientAuthenticatorProvidersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/client-authenticator-providers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get client authenticator providers Returns a stream of client authenticator providers.
     */
    async adminRealmsRealmAuthenticationClientAuthenticatorProvidersGet(requestParameters: AdminRealmsRealmAuthenticationClientAuthenticatorProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get authenticator provider\'s configuration description
     */
    async adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetRaw(requestParameters: AdminRealmsRealmAuthenticationConfigDescriptionProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorConfigInfoRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationConfigDescriptionProviderIdGet().'
            );
        }

        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling adminRealmsRealmAuthenticationConfigDescriptionProviderIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/config-description/{providerId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorConfigInfoRepresentationFromJSON(jsonValue));
    }

    /**
     * Get authenticator provider\'s configuration description
     */
    async adminRealmsRealmAuthenticationConfigDescriptionProviderIdGet(requestParameters: AdminRealmsRealmAuthenticationConfigDescriptionProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorConfigInfoRepresentation> {
        const response = await this.adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete authenticator configuration
     */
    async adminRealmsRealmAuthenticationConfigIdDeleteRaw(requestParameters: AdminRealmsRealmAuthenticationConfigIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationConfigIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmAuthenticationConfigIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/config/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete authenticator configuration
     */
    async adminRealmsRealmAuthenticationConfigIdDelete(requestParameters: AdminRealmsRealmAuthenticationConfigIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationConfigIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get authenticator configuration
     */
    async adminRealmsRealmAuthenticationConfigIdGetRaw(requestParameters: AdminRealmsRealmAuthenticationConfigIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorConfigRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationConfigIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmAuthenticationConfigIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/config/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorConfigRepresentationFromJSON(jsonValue));
    }

    /**
     * Get authenticator configuration
     */
    async adminRealmsRealmAuthenticationConfigIdGet(requestParameters: AdminRealmsRealmAuthenticationConfigIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorConfigRepresentation> {
        const response = await this.adminRealmsRealmAuthenticationConfigIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update authenticator configuration
     */
    async adminRealmsRealmAuthenticationConfigIdPutRaw(requestParameters: AdminRealmsRealmAuthenticationConfigIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationConfigIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmAuthenticationConfigIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/config/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorConfigRepresentationToJSON(requestParameters['authenticatorConfigRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update authenticator configuration
     */
    async adminRealmsRealmAuthenticationConfigIdPut(requestParameters: AdminRealmsRealmAuthenticationConfigIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationConfigIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create new authenticator configuration
     * @deprecated
     */
    async adminRealmsRealmAuthenticationConfigPostRaw(requestParameters: AdminRealmsRealmAuthenticationConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationConfigPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/config`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorConfigRepresentationToJSON(requestParameters['authenticatorConfigRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new authenticator configuration
     * @deprecated
     */
    async adminRealmsRealmAuthenticationConfigPost(requestParameters: AdminRealmsRealmAuthenticationConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationConfigPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get execution\'s configuration
     * @deprecated
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetRaw(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorConfigRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet().'
            );
        }

        if (requestParameters['executionId'] == null) {
            throw new runtime.RequiredError(
                'executionId',
                'Required parameter "executionId" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/executions/{executionId}/config/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters['executionId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorConfigRepresentationFromJSON(jsonValue));
    }

    /**
     * Get execution\'s configuration
     * @deprecated
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorConfigRepresentation> {
        const response = await this.adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update execution with new configuration
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostRaw(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPost().'
            );
        }

        if (requestParameters['executionId'] == null) {
            throw new runtime.RequiredError(
                'executionId',
                'Required parameter "executionId" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/executions/{executionId}/config`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters['executionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorConfigRepresentationToJSON(requestParameters['authenticatorConfigRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update execution with new configuration
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPost(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete execution
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteRaw(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdDelete().'
            );
        }

        if (requestParameters['executionId'] == null) {
            throw new runtime.RequiredError(
                'executionId',
                'Required parameter "executionId" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/executions/{executionId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters['executionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete execution
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdDelete(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Single Execution
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdGetRaw(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdGet().'
            );
        }

        if (requestParameters['executionId'] == null) {
            throw new runtime.RequiredError(
                'executionId',
                'Required parameter "executionId" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/executions/{executionId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters['executionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Single Execution
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdGet(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationExecutionsExecutionIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Lower execution\'s priority
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostRaw(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPost().'
            );
        }

        if (requestParameters['executionId'] == null) {
            throw new runtime.RequiredError(
                'executionId',
                'Required parameter "executionId" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/executions/{executionId}/lower-priority`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters['executionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lower execution\'s priority
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPost(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostRaw(requestParameters, initOverrides);
    }

    /**
     * Raise execution\'s priority
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostRaw(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPost().'
            );
        }

        if (requestParameters['executionId'] == null) {
            throw new runtime.RequiredError(
                'executionId',
                'Required parameter "executionId" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/executions/{executionId}/raise-priority`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters['executionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Raise execution\'s priority
     */
    async adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPost(requestParameters: AdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostRaw(requestParameters, initOverrides);
    }

    /**
     * Add new authentication execution
     */
    async adminRealmsRealmAuthenticationExecutionsPostRaw(requestParameters: AdminRealmsRealmAuthenticationExecutionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationExecutionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/executions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationExecutionRepresentationToJSON(requestParameters['authenticationExecutionRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add new authentication execution
     */
    async adminRealmsRealmAuthenticationExecutionsPost(requestParameters: AdminRealmsRealmAuthenticationExecutionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationExecutionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Copy existing authentication flow under a new name The new name is given as \'newName\' attribute of the passed JSON object
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasCopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasCopyPost().'
            );
        }

        if (requestParameters['flowAlias'] == null) {
            throw new runtime.RequiredError(
                'flowAlias',
                'Required parameter "flowAlias" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasCopyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows/{flowAlias}/copy`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"flowAlias"}}`, encodeURIComponent(String(requestParameters['flowAlias']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Copy existing authentication flow under a new name The new name is given as \'newName\' attribute of the passed JSON object
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasCopyPost(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasCopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostRaw(requestParameters, initOverrides);
    }

    /**
     * Add new authentication execution to a flow
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPost().'
            );
        }

        if (requestParameters['flowAlias'] == null) {
            throw new runtime.RequiredError(
                'flowAlias',
                'Required parameter "flowAlias" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows/{flowAlias}/executions/execution`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"flowAlias"}}`, encodeURIComponent(String(requestParameters['flowAlias']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add new authentication execution to a flow
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPost(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Add new flow with new execution to existing flow
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPost().'
            );
        }

        if (requestParameters['flowAlias'] == null) {
            throw new runtime.RequiredError(
                'flowAlias',
                'Required parameter "flowAlias" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows/{flowAlias}/executions/flow`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"flowAlias"}}`, encodeURIComponent(String(requestParameters['flowAlias']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add new flow with new execution to existing flow
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPost(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get authentication executions for a flow
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGet().'
            );
        }

        if (requestParameters['flowAlias'] == null) {
            throw new runtime.RequiredError(
                'flowAlias',
                'Required parameter "flowAlias" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows/{flowAlias}/executions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"flowAlias"}}`, encodeURIComponent(String(requestParameters['flowAlias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get authentication executions for a flow
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGet(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update authentication executions of a Flow
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPut().'
            );
        }

        if (requestParameters['flowAlias'] == null) {
            throw new runtime.RequiredError(
                'flowAlias',
                'Required parameter "flowAlias" was null or undefined when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows/{flowAlias}/executions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"flowAlias"}}`, encodeURIComponent(String(requestParameters['flowAlias']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationExecutionInfoRepresentationToJSON(requestParameters['authenticationExecutionInfoRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update authentication executions of a Flow
     */
    async adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPut(requestParameters: AdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get authentication flows Returns a stream of authentication flows.
     */
    async adminRealmsRealmAuthenticationFlowsGetRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuthenticationFlowRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuthenticationFlowRepresentationFromJSON));
    }

    /**
     * Get authentication flows Returns a stream of authentication flows.
     */
    async adminRealmsRealmAuthenticationFlowsGet(requestParameters: AdminRealmsRealmAuthenticationFlowsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuthenticationFlowRepresentation>> {
        const response = await this.adminRealmsRealmAuthenticationFlowsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an authentication flow
     */
    async adminRealmsRealmAuthenticationFlowsIdDeleteRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmAuthenticationFlowsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an authentication flow
     */
    async adminRealmsRealmAuthenticationFlowsIdDelete(requestParameters: AdminRealmsRealmAuthenticationFlowsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationFlowsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get authentication flow for id
     */
    async adminRealmsRealmAuthenticationFlowsIdGetRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationFlowRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmAuthenticationFlowsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationFlowRepresentationFromJSON(jsonValue));
    }

    /**
     * Get authentication flow for id
     */
    async adminRealmsRealmAuthenticationFlowsIdGet(requestParameters: AdminRealmsRealmAuthenticationFlowsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationFlowRepresentation> {
        const response = await this.adminRealmsRealmAuthenticationFlowsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an authentication flow
     */
    async adminRealmsRealmAuthenticationFlowsIdPutRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmAuthenticationFlowsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationFlowRepresentationToJSON(requestParameters['authenticationFlowRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an authentication flow
     */
    async adminRealmsRealmAuthenticationFlowsIdPut(requestParameters: AdminRealmsRealmAuthenticationFlowsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationFlowsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new authentication flow
     */
    async adminRealmsRealmAuthenticationFlowsPostRaw(requestParameters: AdminRealmsRealmAuthenticationFlowsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFlowsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/flows`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationFlowRepresentationToJSON(requestParameters['authenticationFlowRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new authentication flow
     */
    async adminRealmsRealmAuthenticationFlowsPost(requestParameters: AdminRealmsRealmAuthenticationFlowsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationFlowsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get form action providers Returns a stream of form action providers.
     */
    async adminRealmsRealmAuthenticationFormActionProvidersGetRaw(requestParameters: AdminRealmsRealmAuthenticationFormActionProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFormActionProvidersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/form-action-providers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get form action providers Returns a stream of form action providers.
     */
    async adminRealmsRealmAuthenticationFormActionProvidersGet(requestParameters: AdminRealmsRealmAuthenticationFormActionProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.adminRealmsRealmAuthenticationFormActionProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get form providers Returns a stream of form providers.
     */
    async adminRealmsRealmAuthenticationFormProvidersGetRaw(requestParameters: AdminRealmsRealmAuthenticationFormProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationFormProvidersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/form-providers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get form providers Returns a stream of form providers.
     */
    async adminRealmsRealmAuthenticationFormProvidersGet(requestParameters: AdminRealmsRealmAuthenticationFormProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.adminRealmsRealmAuthenticationFormProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get configuration descriptions for all clients
     */
    async adminRealmsRealmAuthenticationPerClientConfigDescriptionGetRaw(requestParameters: AdminRealmsRealmAuthenticationPerClientConfigDescriptionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<ConfigPropertyRepresentation>; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationPerClientConfigDescriptionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/per-client-config-description`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get configuration descriptions for all clients
     */
    async adminRealmsRealmAuthenticationPerClientConfigDescriptionGet(requestParameters: AdminRealmsRealmAuthenticationPerClientConfigDescriptionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<ConfigPropertyRepresentation>; }> {
        const response = await this.adminRealmsRealmAuthenticationPerClientConfigDescriptionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new required actions
     */
    async adminRealmsRealmAuthenticationRegisterRequiredActionPostRaw(requestParameters: AdminRealmsRealmAuthenticationRegisterRequiredActionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationRegisterRequiredActionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/register-required-action`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register a new required actions
     */
    async adminRealmsRealmAuthenticationRegisterRequiredActionPost(requestParameters: AdminRealmsRealmAuthenticationRegisterRequiredActionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationRegisterRequiredActionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete required action
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasDeleteRaw(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasDelete().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/required-actions/{alias}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete required action
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasDelete(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationRequiredActionsAliasDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get required action for alias
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasGetRaw(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequiredActionProviderRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasGet().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/required-actions/{alias}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequiredActionProviderRepresentationFromJSON(jsonValue));
    }

    /**
     * Get required action for alias
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasGet(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequiredActionProviderRepresentation> {
        const response = await this.adminRealmsRealmAuthenticationRequiredActionsAliasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lower required action\'s priority
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostRaw(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPost().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/required-actions/{alias}/lower-priority`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lower required action\'s priority
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPost(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update required action
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasPutRaw(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasPut().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/required-actions/{alias}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequiredActionProviderRepresentationToJSON(requestParameters['requiredActionProviderRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update required action
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasPut(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationRequiredActionsAliasPutRaw(requestParameters, initOverrides);
    }

    /**
     * Raise required action\'s priority
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostRaw(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPost().'
            );
        }

        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/required-actions/{alias}/raise-priority`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Raise required action\'s priority
     */
    async adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPost(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get required actions Returns a stream of required actions.
     */
    async adminRealmsRealmAuthenticationRequiredActionsGetRaw(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RequiredActionProviderRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationRequiredActionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/required-actions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RequiredActionProviderRepresentationFromJSON));
    }

    /**
     * Get required actions Returns a stream of required actions.
     */
    async adminRealmsRealmAuthenticationRequiredActionsGet(requestParameters: AdminRealmsRealmAuthenticationRequiredActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RequiredActionProviderRepresentation>> {
        const response = await this.adminRealmsRealmAuthenticationRequiredActionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get unregistered required actions Returns a stream of unregistered required actions.
     */
    async adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetRaw(requestParameters: AdminRealmsRealmAuthenticationUnregisteredRequiredActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: string; }>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAuthenticationUnregisteredRequiredActionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/authentication/unregistered-required-actions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get unregistered required actions Returns a stream of unregistered required actions.
     */
    async adminRealmsRealmAuthenticationUnregisteredRequiredActionsGet(requestParameters: AdminRealmsRealmAuthenticationUnregisteredRequiredActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: string; }>> {
        const response = await this.adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
