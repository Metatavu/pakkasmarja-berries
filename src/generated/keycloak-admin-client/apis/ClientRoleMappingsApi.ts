/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RoleRepresentation,
} from '../models/index';
import {
    RoleRepresentationFromJSON,
    RoleRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRequest {
    realm: string;
    groupId: string;
    client: string;
}

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest {
    realm: string;
    groupId: string;
    client: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest {
    realm: string;
    groupId: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRequest {
    realm: string;
    groupId: string;
    client: string;
}

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest {
    realm: string;
    groupId: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRequest {
    realm: string;
    userId: string;
    client: string;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest {
    realm: string;
    userId: string;
    client: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest {
    realm: string;
    userId: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRequest {
    realm: string;
    userId: string;
    client: string;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest {
    realm: string;
    userId: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

/**
 * 
 */
export class ClientRoleMappingsApi extends runtime.BaseAPI {

    /**
     * Get available client-level roles that can be mapped to the user
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get available client-level roles that can be mapped to the user
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGet(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get effective client-level role mappings This recurses any composite roles
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get effective client-level role mappings This recurses any composite roles
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGet(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete client-level roles from user role mapping
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete client-level roles from user role mapping
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDelete(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get client-level role mappings for the user, and the app
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get client-level role mappings for the user, and the app
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGet(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add client-level roles to the user role mapping
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPost().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPost().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add client-level roles to the user role mapping
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPost(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get available client-level roles that can be mapped to the user
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get available client-level roles that can be mapped to the user
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGet(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get effective client-level role mappings This recurses any composite roles
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get effective client-level role mappings This recurses any composite roles
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGet(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete client-level roles from user role mapping
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete client-level roles from user role mapping
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientDelete(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get client-level role mappings for the user, and the app
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get client-level role mappings for the user, and the app
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientGet(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add client-level roles to the user role mapping
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientPost().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add client-level roles to the user role mapping
     */
    async adminRealmsRealmUsersUserIdRoleMappingsClientsClientPost(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRaw(requestParameters, initOverrides);
    }

}
