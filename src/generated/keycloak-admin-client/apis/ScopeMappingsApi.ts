/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MappingsRepresentation,
  RoleRepresentation,
} from '../models/index';
import {
    MappingsRepresentationFromJSON,
    MappingsRepresentationToJSON,
    RoleRepresentationFromJSON,
    RoleRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetRequest {
    realm: string;
    clientScopeId: string;
    client: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetRequest {
    realm: string;
    clientScopeId: string;
    client: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteRequest {
    realm: string;
    clientScopeId: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetRequest {
    realm: string;
    clientScopeId: string;
    client: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostRequest {
    realm: string;
    clientScopeId: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetRequest {
    realm: string;
    clientScopeId: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteRequest {
    realm: string;
    clientScopeId: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostRequest {
    realm: string;
    clientScopeId: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetRequest {
    realm: string;
    clientScopeId: string;
    client: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetRequest {
    realm: string;
    clientScopeId: string;
    client: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteRequest {
    realm: string;
    clientScopeId: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetRequest {
    realm: string;
    clientScopeId: string;
    client: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostRequest {
    realm: string;
    clientScopeId: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetRequest {
    realm: string;
    clientScopeId: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteRequest {
    realm: string;
    clientScopeId: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostRequest {
    realm: string;
    clientScopeId: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetRequest {
    realm: string;
    clientUuid: string;
    client: string;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetRequest {
    realm: string;
    clientUuid: string;
    client: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteRequest {
    realm: string;
    clientUuid: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetRequest {
    realm: string;
    clientUuid: string;
    client: string;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostRequest {
    realm: string;
    clientUuid: string;
    client: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetRequest {
    realm: string;
    clientUuid: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteRequest {
    realm: string;
    clientUuid: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsRealmGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidScopeMappingsRealmPostRequest {
    realm: string;
    clientUuid: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

/**
 * 
 */
export class ScopeMappingsApi extends runtime.BaseAPI {

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client\'s scope.
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client\'s scope.
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove client-level roles from the client\'s scope.
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove client-level roles from the client\'s scope.
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get the roles associated with a client\'s scope Returns roles for the client.
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get the roles associated with a client\'s scope Returns roles for the client.
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add client-level roles to the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add client-level roles to the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get all scope mappings for the client
     * @deprecated
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MappingsRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MappingsRepresentationFromJSON(jsonValue));
    }

    /**
     * Get all scope mappings for the client
     * @deprecated
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MappingsRepresentation> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get realm-level roles that are available to attach to this client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles that are available to attach to this client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a set of realm-level roles from the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a set of realm-level roles from the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get realm-level roles associated with the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles associated with the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a set of realm-level roles to the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a set of realm-level roles to the client\'s scope
     */
    async adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost(requestParameters: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostRaw(requestParameters, initOverrides);
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client\'s scope.
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client\'s scope.
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove client-level roles from the client\'s scope.
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove client-level roles from the client\'s scope.
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get the roles associated with a client\'s scope Returns roles for the client.
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get the roles associated with a client\'s scope Returns roles for the client.
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add client-level roles to the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add client-level roles to the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get all scope mappings for the client
     * @deprecated
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MappingsRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MappingsRepresentationFromJSON(jsonValue));
    }

    /**
     * Get all scope mappings for the client
     * @deprecated
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MappingsRepresentation> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get realm-level roles that are available to attach to this client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles that are available to attach to this client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a set of realm-level roles from the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a set of realm-level roles from the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get realm-level roles associated with the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles associated with the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a set of realm-level roles to the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a set of realm-level roles to the client\'s scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostRaw(requestParameters, initOverrides);
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client\'s scope.
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client\'s scope.
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove client-level roles from the client\'s scope.
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove client-level roles from the client\'s scope.
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get the roles associated with a client\'s scope Returns roles for the client.
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get the roles associated with a client\'s scope Returns roles for the client.
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add client-level roles to the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost().'
            );
        }

        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"client"}}`, encodeURIComponent(String(requestParameters['client']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add client-level roles to the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get all scope mappings for the client
     * @deprecated
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MappingsRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MappingsRepresentationFromJSON(jsonValue));
    }

    /**
     * Get all scope mappings for the client
     * @deprecated
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsGet(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MappingsRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidScopeMappingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get realm-level roles that are available to attach to this client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles that are available to attach to this client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a set of realm-level roles from the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a set of realm-level roles from the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get realm-level roles associated with the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles associated with the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmGet(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidScopeMappingsRealmGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a set of realm-level roles to the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a set of realm-level roles to the client\'s scope
     */
    async adminRealmsRealmClientsClientUuidScopeMappingsRealmPost(requestParameters: AdminRealmsRealmClientsClientUuidScopeMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidScopeMappingsRealmPostRaw(requestParameters, initOverrides);
    }

}
