/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupRepresentation,
  ManagementPermissionReference,
  RoleRepresentation,
  UserRepresentation,
} from '../models/index';
import {
    GroupRepresentationFromJSON,
    GroupRepresentationToJSON,
    ManagementPermissionReferenceFromJSON,
    ManagementPermissionReferenceToJSON,
    RoleRepresentationFromJSON,
    RoleRepresentationToJSON,
    UserRepresentationFromJSON,
    UserRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmClientsClientUuidRolesGetRequest {
    realm: string;
    clientUuid: string;
    briefRepresentation?: boolean;
    first?: number;
    max?: number;
    search?: string;
}

export interface AdminRealmsRealmClientsClientUuidRolesPostRequest {
    realm: string;
    clientUuid: string;
    roleRepresentation?: RoleRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameDeleteRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameGetRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
    briefRepresentation?: boolean;
    first?: number;
    max?: number;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
    managementPermissionReference?: ManagementPermissionReference;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNamePutRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
    roleRepresentation?: RoleRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGetRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
    first?: number;
    max?: number;
}

export interface AdminRealmsRealmRolesGetRequest {
    realm: string;
    briefRepresentation?: boolean;
    first?: number;
    max?: number;
    search?: string;
}

export interface AdminRealmsRealmRolesPostRequest {
    realm: string;
    roleRepresentation?: RoleRepresentation;
}

export interface AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetRequest {
    realm: string;
    clientUuid: string;
    roleName: string;
}

export interface AdminRealmsRealmRolesRoleNameCompositesDeleteRequest {
    realm: string;
    roleName: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmRolesRoleNameCompositesGetRequest {
    realm: string;
    roleName: string;
}

export interface AdminRealmsRealmRolesRoleNameCompositesPostRequest {
    realm: string;
    roleName: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmRolesRoleNameCompositesRealmGetRequest {
    realm: string;
    roleName: string;
}

export interface AdminRealmsRealmRolesRoleNameDeleteRequest {
    realm: string;
    roleName: string;
}

export interface AdminRealmsRealmRolesRoleNameGetRequest {
    realm: string;
    roleName: string;
}

export interface AdminRealmsRealmRolesRoleNameGroupsGetRequest {
    realm: string;
    roleName: string;
    briefRepresentation?: boolean;
    first?: number;
    max?: number;
}

export interface AdminRealmsRealmRolesRoleNameManagementPermissionsGetRequest {
    realm: string;
    roleName: string;
}

export interface AdminRealmsRealmRolesRoleNameManagementPermissionsPutRequest {
    realm: string;
    roleName: string;
    managementPermissionReference?: ManagementPermissionReference;
}

export interface AdminRealmsRealmRolesRoleNamePutRequest {
    realm: string;
    roleName: string;
    roleRepresentation?: RoleRepresentation;
}

export interface AdminRealmsRealmRolesRoleNameUsersGetRequest {
    realm: string;
    roleName: string;
    first?: number;
    max?: number;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * Get all roles for the realm or client
     */
    async adminRealmsRealmClientsClientUuidRolesGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get all roles for the realm or client
     */
    async adminRealmsRealmClientsClientUuidRolesGet(requestParameters: AdminRealmsRealmClientsClientUuidRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidRolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new role for the realm or client
     */
    async adminRealmsRealmClientsClientUuidRolesPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleRepresentationToJSON(requestParameters['roleRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new role for the realm or client
     */
    async adminRealmsRealmClientsClientUuidRolesPost(requestParameters: AdminRealmsRealmClientsClientUuidRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidRolesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get client-level roles for the client that are in the role\'s composite
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/clients/{client-uuid}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get client-level roles for the client that are in the role\'s composite
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove roles from the role\'s composite
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove roles from the role\'s composite
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get composites of the role
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get composites of the role
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a composite to the role
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a composite to the role
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get realm-level roles of the role\'s composite
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles of the role\'s composite
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a role by name
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameDelete().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a role by name
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameDelete(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidRolesRoleNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a role by name
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleRepresentationFromJSON(jsonValue));
    }

    /**
     * Get a role by name
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameGet(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidRolesRoleNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a stream of groups that have the specified role name
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/groups`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupRepresentationFromJSON));
    }

    /**
     * Returns a stream of groups that have the specified role name
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementPermissionReferenceToJSON(requestParameters['managementPermissionReference']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a role by name
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNamePutRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNamePut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNamePut().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleRepresentationToJSON(requestParameters['roleRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a role by name
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNamePut(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidRolesRoleNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a stream of users that have the specified role name.
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/users`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserRepresentationFromJSON));
    }

    /**
     * Returns a stream of users that have the specified role name.
     */
    async adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet(requestParameters: AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all roles for the realm or client
     */
    async adminRealmsRealmRolesGetRaw(requestParameters: AdminRealmsRealmRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/roles`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get all roles for the realm or client
     */
    async adminRealmsRealmRolesGet(requestParameters: AdminRealmsRealmRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmRolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new role for the realm or client
     */
    async adminRealmsRealmRolesPostRaw(requestParameters: AdminRealmsRealmRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/roles`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleRepresentationToJSON(requestParameters['roleRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new role for the realm or client
     */
    async adminRealmsRealmRolesPost(requestParameters: AdminRealmsRealmRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmRolesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get client-level roles for the client that are in the role\'s composite
     */
    async adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetRaw(requestParameters: AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}/composites/clients/{client-uuid}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get client-level roles for the client that are in the role\'s composite
     */
    async adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet(requestParameters: AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove roles from the role\'s composite
     */
    async adminRealmsRealmRolesRoleNameCompositesDeleteRaw(requestParameters: AdminRealmsRealmRolesRoleNameCompositesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesDelete().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}/composites`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove roles from the role\'s composite
     */
    async adminRealmsRealmRolesRoleNameCompositesDelete(requestParameters: AdminRealmsRealmRolesRoleNameCompositesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmRolesRoleNameCompositesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get composites of the role
     */
    async adminRealmsRealmRolesRoleNameCompositesGetRaw(requestParameters: AdminRealmsRealmRolesRoleNameCompositesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}/composites`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get composites of the role
     */
    async adminRealmsRealmRolesRoleNameCompositesGet(requestParameters: AdminRealmsRealmRolesRoleNameCompositesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmRolesRoleNameCompositesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a composite to the role
     */
    async adminRealmsRealmRolesRoleNameCompositesPostRaw(requestParameters: AdminRealmsRealmRolesRoleNameCompositesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesPost().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}/composites`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a composite to the role
     */
    async adminRealmsRealmRolesRoleNameCompositesPost(requestParameters: AdminRealmsRealmRolesRoleNameCompositesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmRolesRoleNameCompositesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get realm-level roles of the role\'s composite
     */
    async adminRealmsRealmRolesRoleNameCompositesRealmGetRaw(requestParameters: AdminRealmsRealmRolesRoleNameCompositesRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesRealmGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameCompositesRealmGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}/composites/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles of the role\'s composite
     */
    async adminRealmsRealmRolesRoleNameCompositesRealmGet(requestParameters: AdminRealmsRealmRolesRoleNameCompositesRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmRolesRoleNameCompositesRealmGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a role by name
     */
    async adminRealmsRealmRolesRoleNameDeleteRaw(requestParameters: AdminRealmsRealmRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameDelete().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a role by name
     */
    async adminRealmsRealmRolesRoleNameDelete(requestParameters: AdminRealmsRealmRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmRolesRoleNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a role by name
     */
    async adminRealmsRealmRolesRoleNameGetRaw(requestParameters: AdminRealmsRealmRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleRepresentationFromJSON(jsonValue));
    }

    /**
     * Get a role by name
     */
    async adminRealmsRealmRolesRoleNameGet(requestParameters: AdminRealmsRealmRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleRepresentation> {
        const response = await this.adminRealmsRealmRolesRoleNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a stream of groups that have the specified role name
     */
    async adminRealmsRealmRolesRoleNameGroupsGetRaw(requestParameters: AdminRealmsRealmRolesRoleNameGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameGroupsGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameGroupsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}/groups`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupRepresentationFromJSON));
    }

    /**
     * Returns a stream of groups that have the specified role name
     */
    async adminRealmsRealmRolesRoleNameGroupsGet(requestParameters: AdminRealmsRealmRolesRoleNameGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupRepresentation>> {
        const response = await this.adminRealmsRealmRolesRoleNameGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmRolesRoleNameManagementPermissionsGetRaw(requestParameters: AdminRealmsRealmRolesRoleNameManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameManagementPermissionsGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameManagementPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmRolesRoleNameManagementPermissionsGet(requestParameters: AdminRealmsRealmRolesRoleNameManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmRolesRoleNameManagementPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmRolesRoleNameManagementPermissionsPutRaw(requestParameters: AdminRealmsRealmRolesRoleNameManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameManagementPermissionsPut().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameManagementPermissionsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}/management/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementPermissionReferenceToJSON(requestParameters['managementPermissionReference']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     */
    async adminRealmsRealmRolesRoleNameManagementPermissionsPut(requestParameters: AdminRealmsRealmRolesRoleNameManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmRolesRoleNameManagementPermissionsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a role by name
     */
    async adminRealmsRealmRolesRoleNamePutRaw(requestParameters: AdminRealmsRealmRolesRoleNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNamePut().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleRepresentationToJSON(requestParameters['roleRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a role by name
     */
    async adminRealmsRealmRolesRoleNamePut(requestParameters: AdminRealmsRealmRolesRoleNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmRolesRoleNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a stream of users that have the specified role name.
     */
    async adminRealmsRealmRolesRoleNameUsersGetRaw(requestParameters: AdminRealmsRealmRolesRoleNameUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmRolesRoleNameUsersGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling adminRealmsRealmRolesRoleNameUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/roles/{role-name}/users`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserRepresentationFromJSON));
    }

    /**
     * Returns a stream of users that have the specified role name.
     */
    async adminRealmsRealmRolesRoleNameUsersGet(requestParameters: AdminRealmsRealmRolesRoleNameUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserRepresentation>> {
        const response = await this.adminRealmsRealmRolesRoleNameUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
