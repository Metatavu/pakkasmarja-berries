/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComponentRepresentation,
  ComponentTypeRepresentation,
} from '../models/index';
import {
    ComponentRepresentationFromJSON,
    ComponentRepresentationToJSON,
    ComponentTypeRepresentationFromJSON,
    ComponentTypeRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmComponentsGetRequest {
    realm: string;
    name?: string;
    parent?: string;
    type?: string;
}

export interface AdminRealmsRealmComponentsIdDeleteRequest {
    realm: string;
    id: string;
}

export interface AdminRealmsRealmComponentsIdGetRequest {
    realm: string;
    id: string;
}

export interface AdminRealmsRealmComponentsIdPutRequest {
    realm: string;
    id: string;
    componentRepresentation?: ComponentRepresentation;
}

export interface AdminRealmsRealmComponentsIdSubComponentTypesGetRequest {
    realm: string;
    id: string;
    type?: string;
}

export interface AdminRealmsRealmComponentsPostRequest {
    realm: string;
    componentRepresentation?: ComponentRepresentation;
}

/**
 * 
 */
export class ComponentApi extends runtime.BaseAPI {

    /**
     */
    async adminRealmsRealmComponentsGetRaw(requestParameters: AdminRealmsRealmComponentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComponentRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmComponentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['parent'] != null) {
            queryParameters['parent'] = requestParameters['parent'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/components`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComponentRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmComponentsGet(requestParameters: AdminRealmsRealmComponentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComponentRepresentation>> {
        const response = await this.adminRealmsRealmComponentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmComponentsIdDeleteRaw(requestParameters: AdminRealmsRealmComponentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmComponentsIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmComponentsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/components/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmComponentsIdDelete(requestParameters: AdminRealmsRealmComponentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmComponentsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmComponentsIdGetRaw(requestParameters: AdminRealmsRealmComponentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComponentRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmComponentsIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmComponentsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/components/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmComponentsIdGet(requestParameters: AdminRealmsRealmComponentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComponentRepresentation> {
        const response = await this.adminRealmsRealmComponentsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmComponentsIdPutRaw(requestParameters: AdminRealmsRealmComponentsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmComponentsIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmComponentsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/components/{id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComponentRepresentationToJSON(requestParameters['componentRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmComponentsIdPut(requestParameters: AdminRealmsRealmComponentsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmComponentsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * List of subcomponent types that are available to configure for a particular parent component.
     */
    async adminRealmsRealmComponentsIdSubComponentTypesGetRaw(requestParameters: AdminRealmsRealmComponentsIdSubComponentTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComponentTypeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmComponentsIdSubComponentTypesGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRealmsRealmComponentsIdSubComponentTypesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/components/{id}/sub-component-types`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComponentTypeRepresentationFromJSON));
    }

    /**
     * List of subcomponent types that are available to configure for a particular parent component.
     */
    async adminRealmsRealmComponentsIdSubComponentTypesGet(requestParameters: AdminRealmsRealmComponentsIdSubComponentTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComponentTypeRepresentation>> {
        const response = await this.adminRealmsRealmComponentsIdSubComponentTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmComponentsPostRaw(requestParameters: AdminRealmsRealmComponentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmComponentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/components`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComponentRepresentationToJSON(requestParameters['componentRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmComponentsPost(requestParameters: AdminRealmsRealmComponentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmComponentsPostRaw(requestParameters, initOverrides);
    }

}
