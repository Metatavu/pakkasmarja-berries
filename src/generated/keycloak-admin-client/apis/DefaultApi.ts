/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AbstractPolicyRepresentation,
  PolicyEvaluationRequest,
  PolicyEvaluationResponse,
  PolicyProviderRepresentation,
  PolicyRepresentation,
  ResourceRepresentation,
  ResourceServerRepresentation,
  ScopeRepresentation,
} from '../models/index';
import {
    AbstractPolicyRepresentationFromJSON,
    AbstractPolicyRepresentationToJSON,
    PolicyEvaluationRequestFromJSON,
    PolicyEvaluationRequestToJSON,
    PolicyEvaluationResponseFromJSON,
    PolicyEvaluationResponseToJSON,
    PolicyProviderRepresentationFromJSON,
    PolicyProviderRepresentationToJSON,
    PolicyRepresentationFromJSON,
    PolicyRepresentationToJSON,
    ResourceRepresentationFromJSON,
    ResourceRepresentationToJSON,
    ResourceServerRepresentationFromJSON,
    ResourceServerRepresentationToJSON,
    ScopeRepresentationFromJSON,
    ScopeRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest {
    realm: string;
    clientUuid: string;
    resourceServerRepresentation?: ResourceServerRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest {
    realm: string;
    clientUuid: string;
    policyEvaluationRequest?: PolicyEvaluationRequest;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
    realm: string;
    clientUuid: string;
    fields?: string;
    first?: number;
    max?: number;
    name?: string;
    owner?: string;
    permission?: boolean;
    policyId?: string;
    resource?: string;
    scope?: string;
    type?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest {
    realm: string;
    clientUuid: string;
    body?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest {
    realm: string;
    clientUuid: string;
    fields?: string;
    name?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest {
    realm: string;
    clientUuid: string;
    policyEvaluationRequest?: PolicyEvaluationRequest;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
    realm: string;
    clientUuid: string;
    fields?: string;
    first?: number;
    max?: number;
    name?: string;
    owner?: string;
    permission?: boolean;
    policyId?: string;
    resource?: string;
    scope?: string;
    type?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest {
    realm: string;
    clientUuid: string;
    body?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest {
    realm: string;
    clientUuid: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest {
    realm: string;
    clientUuid: string;
    fields?: string;
    name?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest {
    realm: string;
    clientUuid: string;
    resourceServerRepresentation?: ResourceServerRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
    realm: string;
    clientUuid: string;
    id?: string;
    deep?: boolean;
    exactName?: boolean;
    first?: number;
    matchingUri?: boolean;
    max?: number;
    name?: string;
    owner?: string;
    scope?: string;
    type?: string;
    uri?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
    realm: string;
    clientUuid: string;
    id?: string;
    deep?: boolean;
    exactName?: boolean;
    first?: number;
    matchingUri?: boolean;
    max?: number;
    name?: string;
    owner?: string;
    scope?: string;
    type?: string;
    uri?: string;
    resourceRepresentation?: ResourceRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
    realm: string;
    clientUuid: string;
    resourceId: string;
    id?: string;
    deep?: boolean;
    exactName?: boolean;
    first?: number;
    matchingUri?: boolean;
    max?: number;
    name?: string;
    owner?: string;
    scope?: string;
    type?: string;
    uri?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
    realm: string;
    clientUuid: string;
    resourceId: string;
    id?: string;
    deep?: boolean;
    exactName?: boolean;
    first?: number;
    matchingUri?: boolean;
    max?: number;
    name?: string;
    owner?: string;
    scope?: string;
    type?: string;
    uri?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
    realm: string;
    clientUuid: string;
    resourceId: string;
    id?: string;
    deep?: boolean;
    exactName?: boolean;
    first?: number;
    matchingUri?: boolean;
    max?: number;
    name?: string;
    owner?: string;
    scope?: string;
    type?: string;
    uri?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
    realm: string;
    clientUuid: string;
    resourceId: string;
    id?: string;
    deep?: boolean;
    exactName?: boolean;
    first?: number;
    matchingUri?: boolean;
    max?: number;
    name?: string;
    owner?: string;
    scope?: string;
    type?: string;
    uri?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
    realm: string;
    clientUuid: string;
    resourceId: string;
    id?: string;
    deep?: boolean;
    exactName?: boolean;
    first?: number;
    matchingUri?: boolean;
    max?: number;
    name?: string;
    owner?: string;
    scope?: string;
    type?: string;
    uri?: string;
    resourceRepresentation?: ResourceRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
    realm: string;
    clientUuid: string;
    resourceId: string;
    id?: string;
    deep?: boolean;
    exactName?: boolean;
    first?: number;
    matchingUri?: boolean;
    max?: number;
    name?: string;
    owner?: string;
    scope?: string;
    type?: string;
    uri?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
    realm: string;
    clientUuid: string;
    id?: string;
    deep?: boolean;
    exactName?: boolean;
    first?: number;
    matchingUri?: boolean;
    max?: number;
    owner?: string;
    scope?: string;
    type?: string;
    uri?: string;
    name?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
    realm: string;
    clientUuid: string;
    first?: number;
    max?: number;
    name?: string;
    scopeId?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest {
    realm: string;
    clientUuid: string;
    scopeRepresentation?: ScopeRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest {
    realm: string;
    clientUuid: string;
    scopeId: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest {
    realm: string;
    clientUuid: string;
    scopeId: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest {
    realm: string;
    clientUuid: string;
    scopeId: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest {
    realm: string;
    clientUuid: string;
    scopeId: string;
    scopeRepresentation?: ScopeRepresentation;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest {
    realm: string;
    clientUuid: string;
    scopeId: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest {
    realm: string;
    clientUuid: string;
    name?: string;
}

export interface AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest {
    realm: string;
    clientUuid: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourceServerRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceServerRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourceServerRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerImportPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerImportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/import`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceServerRepresentationToJSON(requestParameters['resourceServerRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerImportPost(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicyEvaluationResponse>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/evaluate`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyEvaluationRequestToJSON(requestParameters['policyEvaluationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyEvaluationResponseFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicyEvaluationResponse> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AbstractPolicyRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['permission'] != null) {
            queryParameters['permission'] = requestParameters['permission'];
        }

        if (requestParameters['policyId'] != null) {
            queryParameters['policyId'] = requestParameters['policyId'];
        }

        if (requestParameters['resource'] != null) {
            queryParameters['resource'] = requestParameters['resource'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AbstractPolicyRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AbstractPolicyRepresentation> | null | undefined > {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PolicyProviderRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/providers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicyProviderRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PolicyProviderRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractPolicyRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/search`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbstractPolicyRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractPolicyRepresentation | null | undefined > {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicyEvaluationResponse>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/evaluate`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyEvaluationRequestToJSON(requestParameters['policyEvaluationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyEvaluationResponseFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicyEvaluationResponse> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AbstractPolicyRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['permission'] != null) {
            queryParameters['permission'] = requestParameters['permission'];
        }

        if (requestParameters['policyId'] != null) {
            queryParameters['policyId'] = requestParameters['policyId'];
        }

        if (requestParameters['resource'] != null) {
            queryParameters['resource'] = requestParameters['resource'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AbstractPolicyRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AbstractPolicyRepresentation> | null | undefined > {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PolicyProviderRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/providers`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicyProviderRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PolicyProviderRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractPolicyRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/search`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbstractPolicyRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractPolicyRepresentation | null | undefined > {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPutRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceServerRepresentationToJSON(requestParameters['resourceServerRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerPut(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResourceRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }

        if (requestParameters['deep'] != null) {
            queryParameters['deep'] = requestParameters['deep'];
        }

        if (requestParameters['exactName'] != null) {
            queryParameters['exactName'] = requestParameters['exactName'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['matchingUri'] != null) {
            queryParameters['matchingUri'] = requestParameters['matchingUri'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uri'] != null) {
            queryParameters['uri'] = requestParameters['uri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResourceRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResourceRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourceRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }

        if (requestParameters['deep'] != null) {
            queryParameters['deep'] = requestParameters['deep'];
        }

        if (requestParameters['exactName'] != null) {
            queryParameters['exactName'] = requestParameters['exactName'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['matchingUri'] != null) {
            queryParameters['matchingUri'] = requestParameters['matchingUri'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uri'] != null) {
            queryParameters['uri'] = requestParameters['uri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceRepresentationToJSON(requestParameters['resourceRepresentation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourceRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }

        if (requestParameters['deep'] != null) {
            queryParameters['deep'] = requestParameters['deep'];
        }

        if (requestParameters['exactName'] != null) {
            queryParameters['exactName'] = requestParameters['exactName'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['matchingUri'] != null) {
            queryParameters['matchingUri'] = requestParameters['matchingUri'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uri'] != null) {
            queryParameters['uri'] = requestParameters['uri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/attributes`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }

        if (requestParameters['deep'] != null) {
            queryParameters['deep'] = requestParameters['deep'];
        }

        if (requestParameters['exactName'] != null) {
            queryParameters['exactName'] = requestParameters['exactName'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['matchingUri'] != null) {
            queryParameters['matchingUri'] = requestParameters['matchingUri'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uri'] != null) {
            queryParameters['uri'] = requestParameters['uri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourceRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }

        if (requestParameters['deep'] != null) {
            queryParameters['deep'] = requestParameters['deep'];
        }

        if (requestParameters['exactName'] != null) {
            queryParameters['exactName'] = requestParameters['exactName'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['matchingUri'] != null) {
            queryParameters['matchingUri'] = requestParameters['matchingUri'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uri'] != null) {
            queryParameters['uri'] = requestParameters['uri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourceRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PolicyRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }

        if (requestParameters['deep'] != null) {
            queryParameters['deep'] = requestParameters['deep'];
        }

        if (requestParameters['exactName'] != null) {
            queryParameters['exactName'] = requestParameters['exactName'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['matchingUri'] != null) {
            queryParameters['matchingUri'] = requestParameters['matchingUri'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uri'] != null) {
            queryParameters['uri'] = requestParameters['uri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicyRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PolicyRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }

        if (requestParameters['deep'] != null) {
            queryParameters['deep'] = requestParameters['deep'];
        }

        if (requestParameters['exactName'] != null) {
            queryParameters['exactName'] = requestParameters['exactName'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['matchingUri'] != null) {
            queryParameters['matchingUri'] = requestParameters['matchingUri'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uri'] != null) {
            queryParameters['uri'] = requestParameters['uri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceRepresentationToJSON(requestParameters['resourceRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScopeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }

        if (requestParameters['deep'] != null) {
            queryParameters['deep'] = requestParameters['deep'];
        }

        if (requestParameters['exactName'] != null) {
            queryParameters['exactName'] = requestParameters['exactName'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['matchingUri'] != null) {
            queryParameters['matchingUri'] = requestParameters['matchingUri'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uri'] != null) {
            queryParameters['uri'] = requestParameters['uri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/scopes`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"resource-id"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScopeRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScopeRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourceRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['_id'] = requestParameters['id'];
        }

        if (requestParameters['deep'] != null) {
            queryParameters['deep'] = requestParameters['deep'];
        }

        if (requestParameters['exactName'] != null) {
            queryParameters['exactName'] = requestParameters['exactName'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['matchingUri'] != null) {
            queryParameters['matchingUri'] = requestParameters['matchingUri'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uri'] != null) {
            queryParameters['uri'] = requestParameters['uri'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/search`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourceRepresentation | null | undefined > {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScopeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['scopeId'] != null) {
            queryParameters['scopeId'] = requestParameters['scopeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScopeRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScopeRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopePost().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScopeRepresentationToJSON(requestParameters['scopeRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopePost(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete().'
            );
        }

        if (requestParameters['scopeId'] == null) {
            throw new runtime.RequiredError(
                'scopeId',
                'Required parameter "scopeId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"scope-id"}}`, encodeURIComponent(String(requestParameters['scopeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScopeRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet().'
            );
        }

        if (requestParameters['scopeId'] == null) {
            throw new runtime.RequiredError(
                'scopeId',
                'Required parameter "scopeId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"scope-id"}}`, encodeURIComponent(String(requestParameters['scopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScopeRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PolicyRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet().'
            );
        }

        if (requestParameters['scopeId'] == null) {
            throw new runtime.RequiredError(
                'scopeId',
                'Required parameter "scopeId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"scope-id"}}`, encodeURIComponent(String(requestParameters['scopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicyRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PolicyRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut().'
            );
        }

        if (requestParameters['scopeId'] == null) {
            throw new runtime.RequiredError(
                'scopeId',
                'Required parameter "scopeId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"scope-id"}}`, encodeURIComponent(String(requestParameters['scopeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ScopeRepresentationToJSON(requestParameters['scopeRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResourceRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet().'
            );
        }

        if (requestParameters['scopeId'] == null) {
            throw new runtime.RequiredError(
                'scopeId',
                'Required parameter "scopeId" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/resources`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))).replace(`{${"scope-id"}}`, encodeURIComponent(String(requestParameters['scopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResourceRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResourceRepresentation>> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScopeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/search`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScopeRepresentationFromJSON));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScopeRepresentation> | null | undefined > {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRaw(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourceServerRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet().'
            );
        }

        if (requestParameters['clientUuid'] == null) {
            throw new runtime.RequiredError(
                'clientUuid',
                'Required parameter "clientUuid" was null or undefined when calling adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/settings`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-uuid"}}`, encodeURIComponent(String(requestParameters['clientUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceServerRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet(requestParameters: AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourceServerRepresentation> {
        const response = await this.adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
