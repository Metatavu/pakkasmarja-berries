/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientScopeRepresentation,
} from '../models/index';
import {
    ClientScopeRepresentationFromJSON,
    ClientScopeRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmClientScopesClientScopeIdDeleteRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientScopesClientScopeIdPutRequest {
    realm: string;
    clientScopeId: string;
    clientScopeRepresentation?: ClientScopeRepresentation;
}

export interface AdminRealmsRealmClientScopesGetRequest {
    realm: string;
}

export interface AdminRealmsRealmClientScopesPostRequest {
    realm: string;
    clientScopeRepresentation?: ClientScopeRepresentation;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdDeleteRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdGetRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmClientTemplatesClientScopeIdPutRequest {
    realm: string;
    clientScopeId: string;
    clientScopeRepresentation?: ClientScopeRepresentation;
}

export interface AdminRealmsRealmClientTemplatesGetRequest {
    realm: string;
}

export interface AdminRealmsRealmClientTemplatesPostRequest {
    realm: string;
    clientScopeRepresentation?: ClientScopeRepresentation;
}

/**
 * 
 */
export class ClientScopesApi extends runtime.BaseAPI {

    /**
     * Delete the client scope
     */
    async adminRealmsRealmClientScopesClientScopeIdDeleteRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the client scope
     */
    async adminRealmsRealmClientScopesClientScopeIdDelete(requestParameters: AdminRealmsRealmClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get representation of the client scope
     */
    async adminRealmsRealmClientScopesClientScopeIdGetRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientScopeRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientScopeRepresentationFromJSON(jsonValue));
    }

    /**
     * Get representation of the client scope
     */
    async adminRealmsRealmClientScopesClientScopeIdGet(requestParameters: AdminRealmsRealmClientScopesClientScopeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientScopeRepresentation> {
        const response = await this.adminRealmsRealmClientScopesClientScopeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the client scope
     */
    async adminRealmsRealmClientScopesClientScopeIdPutRaw(requestParameters: AdminRealmsRealmClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdPut().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientScopesClientScopeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes/{client-scope-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientScopeRepresentationToJSON(requestParameters['clientScopeRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the client scope
     */
    async adminRealmsRealmClientScopesClientScopeIdPut(requestParameters: AdminRealmsRealmClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesClientScopeIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
     */
    async adminRealmsRealmClientScopesGetRaw(requestParameters: AdminRealmsRealmClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientScopeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientScopeRepresentationFromJSON));
    }

    /**
     * Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
     */
    async adminRealmsRealmClientScopesGet(requestParameters: AdminRealmsRealmClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientScopeRepresentation>> {
        const response = await this.adminRealmsRealmClientScopesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new client scope Client Scopeâ€™s name must be unique!
     */
    async adminRealmsRealmClientScopesPostRaw(requestParameters: AdminRealmsRealmClientScopesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientScopesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-scopes`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientScopeRepresentationToJSON(requestParameters['clientScopeRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new client scope Client Scopeâ€™s name must be unique!
     */
    async adminRealmsRealmClientScopesPost(requestParameters: AdminRealmsRealmClientScopesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientScopesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete the client scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdDeleteRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the client scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdDelete(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get representation of the client scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdGetRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientScopeRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdGet().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientScopeRepresentationFromJSON(jsonValue));
    }

    /**
     * Get representation of the client scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdGet(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientScopeRepresentation> {
        const response = await this.adminRealmsRealmClientTemplatesClientScopeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the client scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdPutRaw(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdPut().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmClientTemplatesClientScopeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates/{client-scope-id}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"client-scope-id"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientScopeRepresentationToJSON(requestParameters['clientScopeRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the client scope
     */
    async adminRealmsRealmClientTemplatesClientScopeIdPut(requestParameters: AdminRealmsRealmClientTemplatesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesClientScopeIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
     */
    async adminRealmsRealmClientTemplatesGetRaw(requestParameters: AdminRealmsRealmClientTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientScopeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientScopeRepresentationFromJSON));
    }

    /**
     * Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
     */
    async adminRealmsRealmClientTemplatesGet(requestParameters: AdminRealmsRealmClientTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientScopeRepresentation>> {
        const response = await this.adminRealmsRealmClientTemplatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new client scope Client Scopeâ€™s name must be unique!
     */
    async adminRealmsRealmClientTemplatesPostRaw(requestParameters: AdminRealmsRealmClientTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientTemplatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-templates`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientScopeRepresentationToJSON(requestParameters['clientScopeRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new client scope Client Scopeâ€™s name must be unique!
     */
    async adminRealmsRealmClientTemplatesPost(requestParameters: AdminRealmsRealmClientTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientTemplatesPostRaw(requestParameters, initOverrides);
    }

}
