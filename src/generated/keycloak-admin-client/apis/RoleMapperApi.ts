/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MappingsRepresentation,
  RoleRepresentation,
} from '../models/index';
import {
    MappingsRepresentationFromJSON,
    MappingsRepresentationToJSON,
    RoleRepresentationFromJSON,
    RoleRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsGetRequest {
    realm: string;
    groupId: string;
}

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGetRequest {
    realm: string;
    groupId: string;
}

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGetRequest {
    realm: string;
    groupId: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDeleteRequest {
    realm: string;
    groupId: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGetRequest {
    realm: string;
    groupId: string;
}

export interface AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPostRequest {
    realm: string;
    groupId: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsGetRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGetRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGetRequest {
    realm: string;
    userId: string;
    briefRepresentation?: boolean;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsRealmDeleteRequest {
    realm: string;
    userId: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsRealmGetRequest {
    realm: string;
    userId: string;
}

export interface AdminRealmsRealmUsersUserIdRoleMappingsRealmPostRequest {
    realm: string;
    userId: string;
    roleRepresentation?: Array<RoleRepresentation>;
}

/**
 * 
 */
export class RoleMapperApi extends runtime.BaseAPI {

    /**
     * Get role mappings
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MappingsRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MappingsRepresentationFromJSON(jsonValue));
    }

    /**
     * Get role mappings
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsGet(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MappingsRepresentation> {
        const response = await this.adminRealmsRealmGroupsGroupIdRoleMappingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get realm-level roles that can be mapped
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/realm/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles that can be mapped
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get effective realm-level role mappings This will recurse all composite roles to get the result.
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/realm/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get effective realm-level role mappings This will recurse all composite roles to get the result.
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete realm-level role mappings
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmDeleteRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete realm-level role mappings
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmGroupsGroupIdRoleMappingsRealmDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get realm-level role mappings
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmGetRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmGet().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level role mappings
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmGet(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmGroupsGroupIdRoleMappingsRealmGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add realm-level role mappings to the user
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmPostRaw(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmPost().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmGroupsGroupIdRoleMappingsRealmPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/groups/{group-id}/role-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add realm-level role mappings to the user
     */
    async adminRealmsRealmGroupsGroupIdRoleMappingsRealmPost(requestParameters: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmGroupsGroupIdRoleMappingsRealmPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get role mappings
     */
    async adminRealmsRealmUsersUserIdRoleMappingsGetRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MappingsRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MappingsRepresentationFromJSON(jsonValue));
    }

    /**
     * Get role mappings
     */
    async adminRealmsRealmUsersUserIdRoleMappingsGet(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MappingsRepresentation> {
        const response = await this.adminRealmsRealmUsersUserIdRoleMappingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get realm-level roles that can be mapped
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGetRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/realm/available`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level roles that can be mapped
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get effective realm-level role mappings This will recurse all composite roles to get the result.
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGetRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/realm/composite`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get effective realm-level role mappings This will recurse all composite roles to get the result.
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete realm-level role mappings
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmDeleteRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete realm-level role mappings
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmDelete(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdRoleMappingsRealmDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get realm-level role mappings
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmGetRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleRepresentationFromJSON));
    }

    /**
     * Get realm-level role mappings
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmGet(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRepresentation>> {
        const response = await this.adminRealmsRealmUsersUserIdRoleMappingsRealmGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add realm-level role mappings to the user
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmPostRaw(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminRealmsRealmUsersUserIdRoleMappingsRealmPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users/{user-id}/role-mappings/realm`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"user-id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['roleRepresentation']!.map(RoleRepresentationToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add realm-level role mappings to the user
     */
    async adminRealmsRealmUsersUserIdRoleMappingsRealmPost(requestParameters: AdminRealmsRealmUsersUserIdRoleMappingsRealmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmUsersUserIdRoleMappingsRealmPostRaw(requestParameters, initOverrides);
    }

}
