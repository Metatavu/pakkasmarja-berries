/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminEventRepresentation,
  ClientPoliciesRepresentation,
  ClientProfilesRepresentation,
  ClientRepresentation,
  ClientScopeRepresentation,
  EventRepresentation,
  GlobalRequestResult,
  GroupRepresentation,
  ManagementPermissionReference,
  PathSegment,
  RealmEventsConfigRepresentation,
  RealmRepresentation,
} from '../models/index';
import {
    AdminEventRepresentationFromJSON,
    AdminEventRepresentationToJSON,
    ClientPoliciesRepresentationFromJSON,
    ClientPoliciesRepresentationToJSON,
    ClientProfilesRepresentationFromJSON,
    ClientProfilesRepresentationToJSON,
    ClientRepresentationFromJSON,
    ClientRepresentationToJSON,
    ClientScopeRepresentationFromJSON,
    ClientScopeRepresentationToJSON,
    EventRepresentationFromJSON,
    EventRepresentationToJSON,
    GlobalRequestResultFromJSON,
    GlobalRequestResultToJSON,
    GroupRepresentationFromJSON,
    GroupRepresentationToJSON,
    ManagementPermissionReferenceFromJSON,
    ManagementPermissionReferenceToJSON,
    PathSegmentFromJSON,
    PathSegmentToJSON,
    RealmEventsConfigRepresentationFromJSON,
    RealmEventsConfigRepresentationToJSON,
    RealmRepresentationFromJSON,
    RealmRepresentationToJSON,
} from '../models/index';

export interface AdminRealmsGetRequest {
    briefRepresentation?: boolean;
}

export interface AdminRealmsPostRequest {
    body?: Blob;
}

export interface AdminRealmsRealmAdminEventsDeleteRequest {
    realm: string;
}

export interface AdminRealmsRealmAdminEventsGetRequest {
    realm: string;
    authClient?: string;
    authIpAddress?: string;
    authRealm?: string;
    authUser?: string;
    dateFrom?: string;
    dateTo?: string;
    first?: number;
    max?: number;
    operationTypes?: Array<string>;
    resourcePath?: string;
    resourceTypes?: Array<string>;
}

export interface AdminRealmsRealmClientDescriptionConverterPostRequest {
    realm: string;
    body?: string;
}

export interface AdminRealmsRealmClientPoliciesPoliciesGetRequest {
    realm: string;
}

export interface AdminRealmsRealmClientPoliciesPoliciesPutRequest {
    realm: string;
    clientPoliciesRepresentation?: ClientPoliciesRepresentation;
}

export interface AdminRealmsRealmClientPoliciesProfilesGetRequest {
    realm: string;
    includeGlobalProfiles?: boolean;
}

export interface AdminRealmsRealmClientPoliciesProfilesPutRequest {
    realm: string;
    clientProfilesRepresentation?: ClientProfilesRepresentation;
}

export interface AdminRealmsRealmClientSessionStatsGetRequest {
    realm: string;
}

export interface AdminRealmsRealmCredentialRegistratorsGetRequest {
    realm: string;
}

export interface AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdDeleteRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPutRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmDefaultDefaultClientScopesGetRequest {
    realm: string;
}

export interface AdminRealmsRealmDefaultGroupsGetRequest {
    realm: string;
}

export interface AdminRealmsRealmDefaultGroupsGroupIdDeleteRequest {
    realm: string;
    groupId: string;
}

export interface AdminRealmsRealmDefaultGroupsGroupIdPutRequest {
    realm: string;
    groupId: string;
}

export interface AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdDeleteRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPutRequest {
    realm: string;
    clientScopeId: string;
}

export interface AdminRealmsRealmDefaultOptionalClientScopesGetRequest {
    realm: string;
}

export interface AdminRealmsRealmDeleteRequest {
    realm: string;
}

export interface AdminRealmsRealmEventsConfigGetRequest {
    realm: string;
}

export interface AdminRealmsRealmEventsConfigPutRequest {
    realm: string;
    realmEventsConfigRepresentation?: RealmEventsConfigRepresentation;
}

export interface AdminRealmsRealmEventsDeleteRequest {
    realm: string;
}

export interface AdminRealmsRealmEventsGetRequest {
    realm: string;
    client?: string;
    dateFrom?: string;
    dateTo?: string;
    first?: number;
    ipAddress?: string;
    max?: number;
    type?: Array<string>;
    user?: string;
}

export interface AdminRealmsRealmGetRequest {
    realm: string;
}

export interface AdminRealmsRealmGroupByPathPathGetRequest {
    realm: string;
    path: Array<PathSegment>;
}

export interface AdminRealmsRealmLocalizationGetRequest {
    realm: string;
}

export interface AdminRealmsRealmLocalizationLocaleDeleteRequest {
    realm: string;
    locale: string;
}

export interface AdminRealmsRealmLocalizationLocaleGetRequest {
    realm: string;
    locale: string;
    useRealmDefaultLocaleFallback?: boolean;
}

export interface AdminRealmsRealmLocalizationLocaleKeyDeleteRequest {
    realm: string;
    key: string;
    locale: string;
}

export interface AdminRealmsRealmLocalizationLocaleKeyGetRequest {
    realm: string;
    key: string;
    locale: string;
}

export interface AdminRealmsRealmLocalizationLocaleKeyPutRequest {
    realm: string;
    key: string;
    locale: string;
    body?: string;
}

export interface AdminRealmsRealmLocalizationLocalePostRequest {
    realm: string;
    locale: string;
    requestBody?: { [key: string]: string; };
}

export interface AdminRealmsRealmLogoutAllPostRequest {
    realm: string;
}

export interface AdminRealmsRealmPartialExportPostRequest {
    realm: string;
    exportClients?: boolean;
    exportGroupsAndRoles?: boolean;
}

export interface AdminRealmsRealmPartialImportPostRequest {
    realm: string;
    body?: Blob;
}

export interface AdminRealmsRealmPushRevocationPostRequest {
    realm: string;
}

export interface AdminRealmsRealmPutRequest {
    realm: string;
    realmRepresentation?: RealmRepresentation;
}

export interface AdminRealmsRealmSessionsSessionDeleteRequest {
    realm: string;
    session: string;
}

export interface AdminRealmsRealmTestSMTPConnectionPostOperationRequest {
    realm: string;
    requestBody?: { [key: string]: string; };
}

export interface AdminRealmsRealmUsersManagementPermissionsGetRequest {
    realm: string;
}

export interface AdminRealmsRealmUsersManagementPermissionsPutRequest {
    realm: string;
    managementPermissionReference?: ManagementPermissionReference;
}

/**
 * 
 */
export class RealmsAdminApi extends runtime.BaseAPI {

    /**
     * Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
     */
    async adminRealmsGetRaw(requestParameters: AdminRealmsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RealmRepresentation>>> {
        const queryParameters: any = {};

        if (requestParameters['briefRepresentation'] != null) {
            queryParameters['briefRepresentation'] = requestParameters['briefRepresentation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RealmRepresentationFromJSON));
    }

    /**
     * Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
     */
    async adminRealmsGet(requestParameters: AdminRealmsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RealmRepresentation>> {
        const response = await this.adminRealmsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Realm name must be unique.
     * Import a realm. Imports a realm from a full representation of that realm.
     */
    async adminRealmsPostRaw(requestParameters: AdminRealmsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Realm name must be unique.
     * Import a realm. Imports a realm from a full representation of that realm.
     */
    async adminRealmsPost(requestParameters: AdminRealmsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete all admin events
     */
    async adminRealmsRealmAdminEventsDeleteRaw(requestParameters: AdminRealmsRealmAdminEventsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAdminEventsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/admin-events`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all admin events
     */
    async adminRealmsRealmAdminEventsDelete(requestParameters: AdminRealmsRealmAdminEventsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmAdminEventsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get admin events Returns all admin events, or filters events based on URL query parameters listed here
     */
    async adminRealmsRealmAdminEventsGetRaw(requestParameters: AdminRealmsRealmAdminEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdminEventRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmAdminEventsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['authClient'] != null) {
            queryParameters['authClient'] = requestParameters['authClient'];
        }

        if (requestParameters['authIpAddress'] != null) {
            queryParameters['authIpAddress'] = requestParameters['authIpAddress'];
        }

        if (requestParameters['authRealm'] != null) {
            queryParameters['authRealm'] = requestParameters['authRealm'];
        }

        if (requestParameters['authUser'] != null) {
            queryParameters['authUser'] = requestParameters['authUser'];
        }

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = requestParameters['dateFrom'];
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = requestParameters['dateTo'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['operationTypes'] != null) {
            queryParameters['operationTypes'] = requestParameters['operationTypes'];
        }

        if (requestParameters['resourcePath'] != null) {
            queryParameters['resourcePath'] = requestParameters['resourcePath'];
        }

        if (requestParameters['resourceTypes'] != null) {
            queryParameters['resourceTypes'] = requestParameters['resourceTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/admin-events`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdminEventRepresentationFromJSON));
    }

    /**
     * Get admin events Returns all admin events, or filters events based on URL query parameters listed here
     */
    async adminRealmsRealmAdminEventsGet(requestParameters: AdminRealmsRealmAdminEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdminEventRepresentation>> {
        const response = await this.adminRealmsRealmAdminEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base path for importing clients under this realm.
     */
    async adminRealmsRealmClientDescriptionConverterPostRaw(requestParameters: AdminRealmsRealmClientDescriptionConverterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientDescriptionConverterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-description-converter`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientRepresentationFromJSON(jsonValue));
    }

    /**
     * Base path for importing clients under this realm.
     */
    async adminRealmsRealmClientDescriptionConverterPost(requestParameters: AdminRealmsRealmClientDescriptionConverterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientRepresentation> {
        const response = await this.adminRealmsRealmClientDescriptionConverterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientPoliciesPoliciesGetRaw(requestParameters: AdminRealmsRealmClientPoliciesPoliciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientPoliciesRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientPoliciesPoliciesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-policies/policies`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientPoliciesRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientPoliciesPoliciesGet(requestParameters: AdminRealmsRealmClientPoliciesPoliciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientPoliciesRepresentation> {
        const response = await this.adminRealmsRealmClientPoliciesPoliciesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientPoliciesPoliciesPutRaw(requestParameters: AdminRealmsRealmClientPoliciesPoliciesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientPoliciesPoliciesPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-policies/policies`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientPoliciesRepresentationToJSON(requestParameters['clientPoliciesRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientPoliciesPoliciesPut(requestParameters: AdminRealmsRealmClientPoliciesPoliciesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientPoliciesPoliciesPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmClientPoliciesProfilesGetRaw(requestParameters: AdminRealmsRealmClientPoliciesProfilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientProfilesRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientPoliciesProfilesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeGlobalProfiles'] != null) {
            queryParameters['include-global-profiles'] = requestParameters['includeGlobalProfiles'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-policies/profiles`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientProfilesRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmClientPoliciesProfilesGet(requestParameters: AdminRealmsRealmClientPoliciesProfilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientProfilesRepresentation> {
        const response = await this.adminRealmsRealmClientPoliciesProfilesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmClientPoliciesProfilesPutRaw(requestParameters: AdminRealmsRealmClientPoliciesProfilesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientPoliciesProfilesPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/client-policies/profiles`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientProfilesRepresentationToJSON(requestParameters['clientProfilesRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmClientPoliciesProfilesPut(requestParameters: AdminRealmsRealmClientPoliciesProfilesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmClientPoliciesProfilesPutRaw(requestParameters, initOverrides);
    }

    /**
     * The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map.
     * Get client session stats Returns a JSON map.
     */
    async adminRealmsRealmClientSessionStatsGetRaw(requestParameters: AdminRealmsRealmClientSessionStatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: string; }>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmClientSessionStatsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/client-session-stats`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map.
     * Get client session stats Returns a JSON map.
     */
    async adminRealmsRealmClientSessionStatsGet(requestParameters: AdminRealmsRealmClientSessionStatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: string; }>> {
        const response = await this.adminRealmsRealmClientSessionStatsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmCredentialRegistratorsGetRaw(requestParameters: AdminRealmsRealmCredentialRegistratorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmCredentialRegistratorsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/credential-registrators`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminRealmsRealmCredentialRegistratorsGet(requestParameters: AdminRealmsRealmCredentialRegistratorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.adminRealmsRealmCredentialRegistratorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmDefaultDefaultClientScopesClientScopeIdDeleteRaw(requestParameters: AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDefaultDefaultClientScopesClientScopeIdDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmDefaultDefaultClientScopesClientScopeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/default-default-client-scopes/{clientScopeId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"clientScopeId"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmDefaultDefaultClientScopesClientScopeIdDelete(requestParameters: AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmDefaultDefaultClientScopesClientScopeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmDefaultDefaultClientScopesClientScopeIdPutRaw(requestParameters: AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDefaultDefaultClientScopesClientScopeIdPut().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmDefaultDefaultClientScopesClientScopeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/default-default-client-scopes/{clientScopeId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"clientScopeId"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmDefaultDefaultClientScopesClientScopeIdPut(requestParameters: AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmDefaultDefaultClientScopesClientScopeIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get realm default client scopes.  Only name and ids are returned.
     */
    async adminRealmsRealmDefaultDefaultClientScopesGetRaw(requestParameters: AdminRealmsRealmDefaultDefaultClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientScopeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDefaultDefaultClientScopesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/default-default-client-scopes`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientScopeRepresentationFromJSON));
    }

    /**
     * Get realm default client scopes.  Only name and ids are returned.
     */
    async adminRealmsRealmDefaultDefaultClientScopesGet(requestParameters: AdminRealmsRealmDefaultDefaultClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientScopeRepresentation>> {
        const response = await this.adminRealmsRealmDefaultDefaultClientScopesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group hierarchy.  Only name and ids are returned.
     */
    async adminRealmsRealmDefaultGroupsGetRaw(requestParameters: AdminRealmsRealmDefaultGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDefaultGroupsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/default-groups`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupRepresentationFromJSON));
    }

    /**
     * Get group hierarchy.  Only name and ids are returned.
     */
    async adminRealmsRealmDefaultGroupsGet(requestParameters: AdminRealmsRealmDefaultGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupRepresentation>> {
        const response = await this.adminRealmsRealmDefaultGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmDefaultGroupsGroupIdDeleteRaw(requestParameters: AdminRealmsRealmDefaultGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDefaultGroupsGroupIdDelete().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmDefaultGroupsGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/default-groups/{groupId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmDefaultGroupsGroupIdDelete(requestParameters: AdminRealmsRealmDefaultGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmDefaultGroupsGroupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmDefaultGroupsGroupIdPutRaw(requestParameters: AdminRealmsRealmDefaultGroupsGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDefaultGroupsGroupIdPut().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling adminRealmsRealmDefaultGroupsGroupIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/default-groups/{groupId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmDefaultGroupsGroupIdPut(requestParameters: AdminRealmsRealmDefaultGroupsGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmDefaultGroupsGroupIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmDefaultOptionalClientScopesClientScopeIdDeleteRaw(requestParameters: AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDefaultOptionalClientScopesClientScopeIdDelete().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmDefaultOptionalClientScopesClientScopeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"clientScopeId"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmDefaultOptionalClientScopesClientScopeIdDelete(requestParameters: AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmDefaultOptionalClientScopesClientScopeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmDefaultOptionalClientScopesClientScopeIdPutRaw(requestParameters: AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDefaultOptionalClientScopesClientScopeIdPut().'
            );
        }

        if (requestParameters['clientScopeId'] == null) {
            throw new runtime.RequiredError(
                'clientScopeId',
                'Required parameter "clientScopeId" was null or undefined when calling adminRealmsRealmDefaultOptionalClientScopesClientScopeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"clientScopeId"}}`, encodeURIComponent(String(requestParameters['clientScopeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmDefaultOptionalClientScopesClientScopeIdPut(requestParameters: AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmDefaultOptionalClientScopesClientScopeIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get realm optional client scopes.  Only name and ids are returned.
     */
    async adminRealmsRealmDefaultOptionalClientScopesGetRaw(requestParameters: AdminRealmsRealmDefaultOptionalClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientScopeRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDefaultOptionalClientScopesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/default-optional-client-scopes`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientScopeRepresentationFromJSON));
    }

    /**
     * Get realm optional client scopes.  Only name and ids are returned.
     */
    async adminRealmsRealmDefaultOptionalClientScopesGet(requestParameters: AdminRealmsRealmDefaultOptionalClientScopesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientScopeRepresentation>> {
        const response = await this.adminRealmsRealmDefaultOptionalClientScopesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the realm
     */
    async adminRealmsRealmDeleteRaw(requestParameters: AdminRealmsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the realm
     */
    async adminRealmsRealmDelete(requestParameters: AdminRealmsRealmDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get the events provider configuration Returns JSON object with events provider configuration
     */
    async adminRealmsRealmEventsConfigGetRaw(requestParameters: AdminRealmsRealmEventsConfigGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RealmEventsConfigRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmEventsConfigGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/events/config`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RealmEventsConfigRepresentationFromJSON(jsonValue));
    }

    /**
     * Get the events provider configuration Returns JSON object with events provider configuration
     */
    async adminRealmsRealmEventsConfigGet(requestParameters: AdminRealmsRealmEventsConfigGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RealmEventsConfigRepresentation> {
        const response = await this.adminRealmsRealmEventsConfigGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the events provider Change the events provider and/or its configuration
     */
    async adminRealmsRealmEventsConfigPutRaw(requestParameters: AdminRealmsRealmEventsConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmEventsConfigPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/events/config`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RealmEventsConfigRepresentationToJSON(requestParameters['realmEventsConfigRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the events provider Change the events provider and/or its configuration
     */
    async adminRealmsRealmEventsConfigPut(requestParameters: AdminRealmsRealmEventsConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmEventsConfigPutRaw(requestParameters, initOverrides);
    }

    /**
     * Delete all events
     */
    async adminRealmsRealmEventsDeleteRaw(requestParameters: AdminRealmsRealmEventsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmEventsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/events`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all events
     */
    async adminRealmsRealmEventsDelete(requestParameters: AdminRealmsRealmEventsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmEventsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get events Returns all events, or filters them based on URL query parameters listed here
     */
    async adminRealmsRealmEventsGetRaw(requestParameters: AdminRealmsRealmEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventRepresentation>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmEventsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['client'] != null) {
            queryParameters['client'] = requestParameters['client'];
        }

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = requestParameters['dateFrom'];
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = requestParameters['dateTo'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['ipAddress'] != null) {
            queryParameters['ipAddress'] = requestParameters['ipAddress'];
        }

        if (requestParameters['max'] != null) {
            queryParameters['max'] = requestParameters['max'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/events`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventRepresentationFromJSON));
    }

    /**
     * Get events Returns all events, or filters them based on URL query parameters listed here
     */
    async adminRealmsRealmEventsGet(requestParameters: AdminRealmsRealmEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventRepresentation>> {
        const response = await this.adminRealmsRealmEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the top-level representation of the realm It will not include nested information like User and Client representations.
     */
    async adminRealmsRealmGetRaw(requestParameters: AdminRealmsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RealmRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RealmRepresentationFromJSON(jsonValue));
    }

    /**
     * Get the top-level representation of the realm It will not include nested information like User and Client representations.
     */
    async adminRealmsRealmGet(requestParameters: AdminRealmsRealmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RealmRepresentation> {
        const response = await this.adminRealmsRealmGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmGroupByPathPathGetRaw(requestParameters: AdminRealmsRealmGroupByPathPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupRepresentation>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmGroupByPathPathGet().'
            );
        }

        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling adminRealmsRealmGroupByPathPathGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/group-by-path/{path}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmGroupByPathPathGet(requestParameters: AdminRealmsRealmGroupByPathPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupRepresentation> {
        const response = await this.adminRealmsRealmGroupByPathPathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmLocalizationGetRaw(requestParameters: AdminRealmsRealmLocalizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmLocalizationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/localization`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminRealmsRealmLocalizationGet(requestParameters: AdminRealmsRealmLocalizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.adminRealmsRealmLocalizationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleDeleteRaw(requestParameters: AdminRealmsRealmLocalizationLocaleDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmLocalizationLocaleDelete().'
            );
        }

        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling adminRealmsRealmLocalizationLocaleDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/localization/{locale}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleDelete(requestParameters: AdminRealmsRealmLocalizationLocaleDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmLocalizationLocaleDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleGetRaw(requestParameters: AdminRealmsRealmLocalizationLocaleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmLocalizationLocaleGet().'
            );
        }

        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling adminRealmsRealmLocalizationLocaleGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['useRealmDefaultLocaleFallback'] != null) {
            queryParameters['useRealmDefaultLocaleFallback'] = requestParameters['useRealmDefaultLocaleFallback'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/localization/{locale}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleGet(requestParameters: AdminRealmsRealmLocalizationLocaleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.adminRealmsRealmLocalizationLocaleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleKeyDeleteRaw(requestParameters: AdminRealmsRealmLocalizationLocaleKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmLocalizationLocaleKeyDelete().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling adminRealmsRealmLocalizationLocaleKeyDelete().'
            );
        }

        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling adminRealmsRealmLocalizationLocaleKeyDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/localization/{locale}/{key}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleKeyDelete(requestParameters: AdminRealmsRealmLocalizationLocaleKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmLocalizationLocaleKeyDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleKeyGetRaw(requestParameters: AdminRealmsRealmLocalizationLocaleKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmLocalizationLocaleKeyGet().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling adminRealmsRealmLocalizationLocaleKeyGet().'
            );
        }

        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling adminRealmsRealmLocalizationLocaleKeyGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/localization/{locale}/{key}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleKeyGet(requestParameters: AdminRealmsRealmLocalizationLocaleKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.adminRealmsRealmLocalizationLocaleKeyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleKeyPutRaw(requestParameters: AdminRealmsRealmLocalizationLocaleKeyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmLocalizationLocaleKeyPut().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling adminRealmsRealmLocalizationLocaleKeyPut().'
            );
        }

        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling adminRealmsRealmLocalizationLocaleKeyPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        const response = await this.request({
            path: `/admin/realms/{realm}/localization/{locale}/{key}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRealmsRealmLocalizationLocaleKeyPut(requestParameters: AdminRealmsRealmLocalizationLocaleKeyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmLocalizationLocaleKeyPutRaw(requestParameters, initOverrides);
    }

    /**
     * Import localization from uploaded JSON file
     */
    async adminRealmsRealmLocalizationLocalePostRaw(requestParameters: AdminRealmsRealmLocalizationLocalePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmLocalizationLocalePost().'
            );
        }

        if (requestParameters['locale'] == null) {
            throw new runtime.RequiredError(
                'locale',
                'Required parameter "locale" was null or undefined when calling adminRealmsRealmLocalizationLocalePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/localization/{locale}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters['locale']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Import localization from uploaded JSON file
     */
    async adminRealmsRealmLocalizationLocalePost(requestParameters: AdminRealmsRealmLocalizationLocalePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmLocalizationLocalePostRaw(requestParameters, initOverrides);
    }

    /**
     * Any client that has an admin url will also be told to invalidate any sessions they have.
     * Removes all user sessions.
     */
    async adminRealmsRealmLogoutAllPostRaw(requestParameters: AdminRealmsRealmLogoutAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalRequestResult>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmLogoutAllPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/logout-all`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalRequestResultFromJSON(jsonValue));
    }

    /**
     * Any client that has an admin url will also be told to invalidate any sessions they have.
     * Removes all user sessions.
     */
    async adminRealmsRealmLogoutAllPost(requestParameters: AdminRealmsRealmLogoutAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalRequestResult> {
        const response = await this.adminRealmsRealmLogoutAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partial export of existing realm into a JSON file.
     */
    async adminRealmsRealmPartialExportPostRaw(requestParameters: AdminRealmsRealmPartialExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmPartialExportPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['exportClients'] != null) {
            queryParameters['exportClients'] = requestParameters['exportClients'];
        }

        if (requestParameters['exportGroupsAndRoles'] != null) {
            queryParameters['exportGroupsAndRoles'] = requestParameters['exportGroupsAndRoles'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/partial-export`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Partial export of existing realm into a JSON file.
     */
    async adminRealmsRealmPartialExportPost(requestParameters: AdminRealmsRealmPartialExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmPartialExportPostRaw(requestParameters, initOverrides);
    }

    /**
     * Partial import from a JSON file to an existing realm.
     */
    async adminRealmsRealmPartialImportPostRaw(requestParameters: AdminRealmsRealmPartialImportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmPartialImportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/partialImport`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Partial import from a JSON file to an existing realm.
     */
    async adminRealmsRealmPartialImportPost(requestParameters: AdminRealmsRealmPartialImportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmPartialImportPostRaw(requestParameters, initOverrides);
    }

    /**
     * Push the realm\'s revocation policy to any client that has an admin url associated with it.
     */
    async adminRealmsRealmPushRevocationPostRaw(requestParameters: AdminRealmsRealmPushRevocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalRequestResult>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmPushRevocationPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/push-revocation`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalRequestResultFromJSON(jsonValue));
    }

    /**
     * Push the realm\'s revocation policy to any client that has an admin url associated with it.
     */
    async adminRealmsRealmPushRevocationPost(requestParameters: AdminRealmsRealmPushRevocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalRequestResult> {
        const response = await this.adminRealmsRealmPushRevocationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will only update top-level attributes of the realm.
     * Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
     */
    async adminRealmsRealmPutRaw(requestParameters: AdminRealmsRealmPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RealmRepresentationToJSON(requestParameters['realmRepresentation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will only update top-level attributes of the realm.
     * Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
     */
    async adminRealmsRealmPut(requestParameters: AdminRealmsRealmPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmPutRaw(requestParameters, initOverrides);
    }

    /**
     * Any client that has an admin url will also be told to invalidate this particular session.
     * Remove a specific user session.
     */
    async adminRealmsRealmSessionsSessionDeleteRaw(requestParameters: AdminRealmsRealmSessionsSessionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmSessionsSessionDelete().'
            );
        }

        if (requestParameters['session'] == null) {
            throw new runtime.RequiredError(
                'session',
                'Required parameter "session" was null or undefined when calling adminRealmsRealmSessionsSessionDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/sessions/{session}`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))).replace(`{${"session"}}`, encodeURIComponent(String(requestParameters['session']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Any client that has an admin url will also be told to invalidate this particular session.
     * Remove a specific user session.
     */
    async adminRealmsRealmSessionsSessionDelete(requestParameters: AdminRealmsRealmSessionsSessionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmSessionsSessionDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Test SMTP connection with current logged in user
     * @deprecated
     */
    async adminRealmsRealmTestSMTPConnectionPostRaw(requestParameters: AdminRealmsRealmTestSMTPConnectionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmTestSMTPConnectionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/testSMTPConnection`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Test SMTP connection with current logged in user
     * @deprecated
     */
    async adminRealmsRealmTestSMTPConnectionPost(requestParameters: AdminRealmsRealmTestSMTPConnectionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRealmsRealmTestSMTPConnectionPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async adminRealmsRealmUsersManagementPermissionsGetRaw(requestParameters: AdminRealmsRealmUsersManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersManagementPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/realms/{realm}/users-management-permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmUsersManagementPermissionsGet(requestParameters: AdminRealmsRealmUsersManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmUsersManagementPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminRealmsRealmUsersManagementPermissionsPutRaw(requestParameters: AdminRealmsRealmUsersManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagementPermissionReference>> {
        if (requestParameters['realm'] == null) {
            throw new runtime.RequiredError(
                'realm',
                'Required parameter "realm" was null or undefined when calling adminRealmsRealmUsersManagementPermissionsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/realms/{realm}/users-management-permissions`.replace(`{${"realm"}}`, encodeURIComponent(String(requestParameters['realm']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagementPermissionReferenceToJSON(requestParameters['managementPermissionReference']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagementPermissionReferenceFromJSON(jsonValue));
    }

    /**
     */
    async adminRealmsRealmUsersManagementPermissionsPut(requestParameters: AdminRealmsRealmUsersManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagementPermissionReference> {
        const response = await this.adminRealmsRealmUsersManagementPermissionsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
