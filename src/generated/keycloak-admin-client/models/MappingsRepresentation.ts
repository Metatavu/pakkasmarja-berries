/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ClientMappingsRepresentation } from './ClientMappingsRepresentation';
import {
    ClientMappingsRepresentationFromJSON,
    ClientMappingsRepresentationFromJSONTyped,
    ClientMappingsRepresentationToJSON,
} from './ClientMappingsRepresentation';
import type { RoleRepresentation } from './RoleRepresentation';
import {
    RoleRepresentationFromJSON,
    RoleRepresentationFromJSONTyped,
    RoleRepresentationToJSON,
} from './RoleRepresentation';

/**
 * 
 * @export
 * @interface MappingsRepresentation
 */
export interface MappingsRepresentation {
    /**
     * 
     * @type {Array<RoleRepresentation>}
     * @memberof MappingsRepresentation
     */
    realmMappings?: Array<RoleRepresentation>;
    /**
     * 
     * @type {{ [key: string]: ClientMappingsRepresentation; }}
     * @memberof MappingsRepresentation
     */
    clientMappings?: { [key: string]: ClientMappingsRepresentation; };
}

/**
 * Check if a given object implements the MappingsRepresentation interface.
 */
export function instanceOfMappingsRepresentation(value: object): boolean {
    return true;
}

export function MappingsRepresentationFromJSON(json: any): MappingsRepresentation {
    return MappingsRepresentationFromJSONTyped(json, false);
}

export function MappingsRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): MappingsRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'realmMappings': json['realmMappings'] == null ? undefined : ((json['realmMappings'] as Array<any>).map(RoleRepresentationFromJSON)),
        'clientMappings': json['clientMappings'] == null ? undefined : (mapValues(json['clientMappings'], ClientMappingsRepresentationFromJSON)),
    };
}

export function MappingsRepresentationToJSON(value?: MappingsRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'realmMappings': value['realmMappings'] == null ? undefined : ((value['realmMappings'] as Array<any>).map(RoleRepresentationToJSON)),
        'clientMappings': value['clientMappings'] == null ? undefined : (mapValues(value['clientMappings'], ClientMappingsRepresentationToJSON)),
    };
}

