/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Composites } from './Composites';
import {
    CompositesFromJSON,
    CompositesFromJSONTyped,
    CompositesToJSON,
} from './Composites';

/**
 * 
 * @export
 * @interface RoleRepresentation
 */
export interface RoleRepresentation {
    /**
     * 
     * @type {string}
     * @memberof RoleRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleRepresentation
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleRepresentation
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoleRepresentation
     * @deprecated
     */
    scopeParamRequired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoleRepresentation
     */
    composite?: boolean;
    /**
     * 
     * @type {Composites}
     * @memberof RoleRepresentation
     */
    composites?: Composites;
    /**
     * 
     * @type {boolean}
     * @memberof RoleRepresentation
     */
    clientRole?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RoleRepresentation
     */
    containerId?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof RoleRepresentation
     */
    attributes?: { [key: string]: Array<string>; };
}

/**
 * Check if a given object implements the RoleRepresentation interface.
 */
export function instanceOfRoleRepresentation(value: object): boolean {
    return true;
}

export function RoleRepresentationFromJSON(json: any): RoleRepresentation {
    return RoleRepresentationFromJSONTyped(json, false);
}

export function RoleRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoleRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'scopeParamRequired': json['scopeParamRequired'] == null ? undefined : json['scopeParamRequired'],
        'composite': json['composite'] == null ? undefined : json['composite'],
        'composites': json['composites'] == null ? undefined : CompositesFromJSON(json['composites']),
        'clientRole': json['clientRole'] == null ? undefined : json['clientRole'],
        'containerId': json['containerId'] == null ? undefined : json['containerId'],
        'attributes': json['attributes'] == null ? undefined : json['attributes'],
    };
}

export function RoleRepresentationToJSON(value?: RoleRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'scopeParamRequired': value['scopeParamRequired'],
        'composite': value['composite'],
        'composites': CompositesToJSON(value['composites']),
        'clientRole': value['clientRole'],
        'containerId': value['containerId'],
        'attributes': value['attributes'],
    };
}

