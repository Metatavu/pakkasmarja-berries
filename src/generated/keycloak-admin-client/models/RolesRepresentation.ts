/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RoleRepresentation } from './RoleRepresentation';
import {
    RoleRepresentationFromJSON,
    RoleRepresentationFromJSONTyped,
    RoleRepresentationToJSON,
} from './RoleRepresentation';

/**
 * 
 * @export
 * @interface RolesRepresentation
 */
export interface RolesRepresentation {
    /**
     * 
     * @type {Array<RoleRepresentation>}
     * @memberof RolesRepresentation
     */
    realm?: Array<RoleRepresentation>;
    /**
     * 
     * @type {{ [key: string]: Array<RoleRepresentation>; }}
     * @memberof RolesRepresentation
     */
    client?: { [key: string]: Array<RoleRepresentation>; };
    /**
     * 
     * @type {{ [key: string]: Array<RoleRepresentation>; }}
     * @memberof RolesRepresentation
     * @deprecated
     */
    application?: { [key: string]: Array<RoleRepresentation>; };
}

/**
 * Check if a given object implements the RolesRepresentation interface.
 */
export function instanceOfRolesRepresentation(value: object): boolean {
    return true;
}

export function RolesRepresentationFromJSON(json: any): RolesRepresentation {
    return RolesRepresentationFromJSONTyped(json, false);
}

export function RolesRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): RolesRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'realm': json['realm'] == null ? undefined : ((json['realm'] as Array<any>).map(RoleRepresentationFromJSON)),
        'client': json['client'] == null ? undefined : json['client'],
        'application': json['application'] == null ? undefined : json['application'],
    };
}

export function RolesRepresentationToJSON(value?: RolesRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'realm': value['realm'] == null ? undefined : ((value['realm'] as Array<any>).map(RoleRepresentationToJSON)),
        'client': value['client'],
        'application': value['application'],
    };
}

