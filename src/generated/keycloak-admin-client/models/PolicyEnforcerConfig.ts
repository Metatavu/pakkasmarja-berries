/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnforcementMode } from './EnforcementMode';
import {
    EnforcementModeFromJSON,
    EnforcementModeFromJSONTyped,
    EnforcementModeToJSON,
} from './EnforcementMode';
import type { PathCacheConfig } from './PathCacheConfig';
import {
    PathCacheConfigFromJSON,
    PathCacheConfigFromJSONTyped,
    PathCacheConfigToJSON,
} from './PathCacheConfig';
import type { PathConfig } from './PathConfig';
import {
    PathConfigFromJSON,
    PathConfigFromJSONTyped,
    PathConfigToJSON,
} from './PathConfig';

/**
 * 
 * @export
 * @interface PolicyEnforcerConfig
 */
export interface PolicyEnforcerConfig {
    /**
     * 
     * @type {EnforcementMode}
     * @memberof PolicyEnforcerConfig
     */
    enforcementMode?: EnforcementMode;
    /**
     * 
     * @type {Array<PathConfig>}
     * @memberof PolicyEnforcerConfig
     */
    paths?: Array<PathConfig>;
    /**
     * 
     * @type {PathCacheConfig}
     * @memberof PolicyEnforcerConfig
     */
    pathCache?: PathCacheConfig;
    /**
     * 
     * @type {boolean}
     * @memberof PolicyEnforcerConfig
     */
    lazyLoadPaths?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PolicyEnforcerConfig
     */
    onDenyRedirectTo?: string;
    /**
     * 
     * @type {object}
     * @memberof PolicyEnforcerConfig
     */
    userManagedAccess?: object;
    /**
     * 
     * @type {{ [key: string]: { [key: string]: any; }; }}
     * @memberof PolicyEnforcerConfig
     */
    claimInformationPoint?: { [key: string]: { [key: string]: any; }; };
    /**
     * 
     * @type {boolean}
     * @memberof PolicyEnforcerConfig
     */
    httpMethodAsScope?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PolicyEnforcerConfig
     */
    realm?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyEnforcerConfig
     */
    authServerUrl?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PolicyEnforcerConfig
     */
    credentials?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof PolicyEnforcerConfig
     */
    resource?: string;
}

/**
 * Check if a given object implements the PolicyEnforcerConfig interface.
 */
export function instanceOfPolicyEnforcerConfig(value: object): boolean {
    return true;
}

export function PolicyEnforcerConfigFromJSON(json: any): PolicyEnforcerConfig {
    return PolicyEnforcerConfigFromJSONTyped(json, false);
}

export function PolicyEnforcerConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): PolicyEnforcerConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'enforcementMode': json['enforcement-mode'] == null ? undefined : EnforcementModeFromJSON(json['enforcement-mode']),
        'paths': json['paths'] == null ? undefined : ((json['paths'] as Array<any>).map(PathConfigFromJSON)),
        'pathCache': json['path-cache'] == null ? undefined : PathCacheConfigFromJSON(json['path-cache']),
        'lazyLoadPaths': json['lazy-load-paths'] == null ? undefined : json['lazy-load-paths'],
        'onDenyRedirectTo': json['on-deny-redirect-to'] == null ? undefined : json['on-deny-redirect-to'],
        'userManagedAccess': json['user-managed-access'] == null ? undefined : json['user-managed-access'],
        'claimInformationPoint': json['claim-information-point'] == null ? undefined : json['claim-information-point'],
        'httpMethodAsScope': json['http-method-as-scope'] == null ? undefined : json['http-method-as-scope'],
        'realm': json['realm'] == null ? undefined : json['realm'],
        'authServerUrl': json['auth-server-url'] == null ? undefined : json['auth-server-url'],
        'credentials': json['credentials'] == null ? undefined : json['credentials'],
        'resource': json['resource'] == null ? undefined : json['resource'],
    };
}

export function PolicyEnforcerConfigToJSON(value?: PolicyEnforcerConfig | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'enforcement-mode': EnforcementModeToJSON(value['enforcementMode']),
        'paths': value['paths'] == null ? undefined : ((value['paths'] as Array<any>).map(PathConfigToJSON)),
        'path-cache': PathCacheConfigToJSON(value['pathCache']),
        'lazy-load-paths': value['lazyLoadPaths'],
        'on-deny-redirect-to': value['onDenyRedirectTo'],
        'user-managed-access': value['userManagedAccess'],
        'claim-information-point': value['claimInformationPoint'],
        'http-method-as-scope': value['httpMethodAsScope'],
        'realm': value['realm'],
        'auth-server-url': value['authServerUrl'],
        'credentials': value['credentials'],
        'resource': value['resource'],
    };
}

