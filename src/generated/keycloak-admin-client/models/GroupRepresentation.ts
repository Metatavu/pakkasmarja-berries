/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GroupRepresentation
 */
export interface GroupRepresentation {
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    parentId?: string;
    /**
     * 
     * @type {number}
     * @memberof GroupRepresentation
     */
    subGroupCount?: number;
    /**
     * 
     * @type {Array<GroupRepresentation>}
     * @memberof GroupRepresentation
     */
    subGroups?: Array<GroupRepresentation>;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof GroupRepresentation
     */
    attributes?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupRepresentation
     */
    realmRoles?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof GroupRepresentation
     */
    clientRoles?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof GroupRepresentation
     */
    access?: { [key: string]: boolean; };
}

/**
 * Check if a given object implements the GroupRepresentation interface.
 */
export function instanceOfGroupRepresentation(value: object): boolean {
    return true;
}

export function GroupRepresentationFromJSON(json: any): GroupRepresentation {
    return GroupRepresentationFromJSONTyped(json, false);
}

export function GroupRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'path': json['path'] == null ? undefined : json['path'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'subGroupCount': json['subGroupCount'] == null ? undefined : json['subGroupCount'],
        'subGroups': json['subGroups'] == null ? undefined : ((json['subGroups'] as Array<any>).map(GroupRepresentationFromJSON)),
        'attributes': json['attributes'] == null ? undefined : json['attributes'],
        'realmRoles': json['realmRoles'] == null ? undefined : json['realmRoles'],
        'clientRoles': json['clientRoles'] == null ? undefined : json['clientRoles'],
        'access': json['access'] == null ? undefined : json['access'],
    };
}

export function GroupRepresentationToJSON(value?: GroupRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'path': value['path'],
        'parentId': value['parentId'],
        'subGroupCount': value['subGroupCount'],
        'subGroups': value['subGroups'] == null ? undefined : ((value['subGroups'] as Array<any>).map(GroupRepresentationToJSON)),
        'attributes': value['attributes'],
        'realmRoles': value['realmRoles'],
        'clientRoles': value['clientRoles'],
        'access': value['access'],
    };
}

