/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DecisionStrategy } from './DecisionStrategy';
import {
    DecisionStrategyFromJSON,
    DecisionStrategyFromJSONTyped,
    DecisionStrategyToJSON,
} from './DecisionStrategy';
import type { PolicyEnforcementMode } from './PolicyEnforcementMode';
import {
    PolicyEnforcementModeFromJSON,
    PolicyEnforcementModeFromJSONTyped,
    PolicyEnforcementModeToJSON,
} from './PolicyEnforcementMode';
import type { PolicyRepresentation } from './PolicyRepresentation';
import {
    PolicyRepresentationFromJSON,
    PolicyRepresentationFromJSONTyped,
    PolicyRepresentationToJSON,
} from './PolicyRepresentation';
import type { ResourceRepresentation } from './ResourceRepresentation';
import {
    ResourceRepresentationFromJSON,
    ResourceRepresentationFromJSONTyped,
    ResourceRepresentationToJSON,
} from './ResourceRepresentation';
import type { ScopeRepresentation } from './ScopeRepresentation';
import {
    ScopeRepresentationFromJSON,
    ScopeRepresentationFromJSONTyped,
    ScopeRepresentationToJSON,
} from './ScopeRepresentation';

/**
 * 
 * @export
 * @interface ResourceServerRepresentation
 */
export interface ResourceServerRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ResourceServerRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceServerRepresentation
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceServerRepresentation
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceServerRepresentation
     */
    allowRemoteResourceManagement?: boolean;
    /**
     * 
     * @type {PolicyEnforcementMode}
     * @memberof ResourceServerRepresentation
     */
    policyEnforcementMode?: PolicyEnforcementMode;
    /**
     * 
     * @type {Array<ResourceRepresentation>}
     * @memberof ResourceServerRepresentation
     */
    resources?: Array<ResourceRepresentation>;
    /**
     * 
     * @type {Array<PolicyRepresentation>}
     * @memberof ResourceServerRepresentation
     */
    policies?: Array<PolicyRepresentation>;
    /**
     * 
     * @type {Array<ScopeRepresentation>}
     * @memberof ResourceServerRepresentation
     */
    scopes?: Array<ScopeRepresentation>;
    /**
     * 
     * @type {DecisionStrategy}
     * @memberof ResourceServerRepresentation
     */
    decisionStrategy?: DecisionStrategy;
}

/**
 * Check if a given object implements the ResourceServerRepresentation interface.
 */
export function instanceOfResourceServerRepresentation(value: object): boolean {
    return true;
}

export function ResourceServerRepresentationFromJSON(json: any): ResourceServerRepresentation {
    return ResourceServerRepresentationFromJSONTyped(json, false);
}

export function ResourceServerRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceServerRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'clientId': json['clientId'] == null ? undefined : json['clientId'],
        'name': json['name'] == null ? undefined : json['name'],
        'allowRemoteResourceManagement': json['allowRemoteResourceManagement'] == null ? undefined : json['allowRemoteResourceManagement'],
        'policyEnforcementMode': json['policyEnforcementMode'] == null ? undefined : PolicyEnforcementModeFromJSON(json['policyEnforcementMode']),
        'resources': json['resources'] == null ? undefined : ((json['resources'] as Array<any>).map(ResourceRepresentationFromJSON)),
        'policies': json['policies'] == null ? undefined : ((json['policies'] as Array<any>).map(PolicyRepresentationFromJSON)),
        'scopes': json['scopes'] == null ? undefined : ((json['scopes'] as Array<any>).map(ScopeRepresentationFromJSON)),
        'decisionStrategy': json['decisionStrategy'] == null ? undefined : DecisionStrategyFromJSON(json['decisionStrategy']),
    };
}

export function ResourceServerRepresentationToJSON(value?: ResourceServerRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'clientId': value['clientId'],
        'name': value['name'],
        'allowRemoteResourceManagement': value['allowRemoteResourceManagement'],
        'policyEnforcementMode': PolicyEnforcementModeToJSON(value['policyEnforcementMode']),
        'resources': value['resources'] == null ? undefined : ((value['resources'] as Array<any>).map(ResourceRepresentationToJSON)),
        'policies': value['policies'] == null ? undefined : ((value['policies'] as Array<any>).map(PolicyRepresentationToJSON)),
        'scopes': value['scopes'] == null ? undefined : ((value['scopes'] as Array<any>).map(ScopeRepresentationToJSON)),
        'decisionStrategy': DecisionStrategyToJSON(value['decisionStrategy']),
    };
}

