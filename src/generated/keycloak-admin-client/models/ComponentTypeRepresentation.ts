/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConfigPropertyRepresentation } from './ConfigPropertyRepresentation';
import {
    ConfigPropertyRepresentationFromJSON,
    ConfigPropertyRepresentationFromJSONTyped,
    ConfigPropertyRepresentationToJSON,
} from './ConfigPropertyRepresentation';

/**
 * 
 * @export
 * @interface ComponentTypeRepresentation
 */
export interface ComponentTypeRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ComponentTypeRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentTypeRepresentation
     */
    helpText?: string;
    /**
     * 
     * @type {Array<ConfigPropertyRepresentation>}
     * @memberof ComponentTypeRepresentation
     */
    properties?: Array<ConfigPropertyRepresentation>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ComponentTypeRepresentation
     */
    metadata?: { [key: string]: any; };
}

/**
 * Check if a given object implements the ComponentTypeRepresentation interface.
 */
export function instanceOfComponentTypeRepresentation(value: object): boolean {
    return true;
}

export function ComponentTypeRepresentationFromJSON(json: any): ComponentTypeRepresentation {
    return ComponentTypeRepresentationFromJSONTyped(json, false);
}

export function ComponentTypeRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComponentTypeRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'helpText': json['helpText'] == null ? undefined : json['helpText'],
        'properties': json['properties'] == null ? undefined : ((json['properties'] as Array<any>).map(ConfigPropertyRepresentationFromJSON)),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function ComponentTypeRepresentationToJSON(value?: ComponentTypeRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'helpText': value['helpText'],
        'properties': value['properties'] == null ? undefined : ((value['properties'] as Array<any>).map(ConfigPropertyRepresentationToJSON)),
        'metadata': value['metadata'],
    };
}

