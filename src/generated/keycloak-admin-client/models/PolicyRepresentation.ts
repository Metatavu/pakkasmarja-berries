/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DecisionStrategy } from './DecisionStrategy';
import {
    DecisionStrategyFromJSON,
    DecisionStrategyFromJSONTyped,
    DecisionStrategyToJSON,
} from './DecisionStrategy';
import type { Logic } from './Logic';
import {
    LogicFromJSON,
    LogicFromJSONTyped,
    LogicToJSON,
} from './Logic';
import type { ResourceRepresentation } from './ResourceRepresentation';
import {
    ResourceRepresentationFromJSON,
    ResourceRepresentationFromJSONTyped,
    ResourceRepresentationToJSON,
} from './ResourceRepresentation';
import type { ScopeRepresentation } from './ScopeRepresentation';
import {
    ScopeRepresentationFromJSON,
    ScopeRepresentationFromJSONTyped,
    ScopeRepresentationToJSON,
} from './ScopeRepresentation';

/**
 * 
 * @export
 * @interface PolicyRepresentation
 */
export interface PolicyRepresentation {
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    type?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof PolicyRepresentation
     */
    policies?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof PolicyRepresentation
     */
    resources?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof PolicyRepresentation
     */
    scopes?: Set<string>;
    /**
     * 
     * @type {Logic}
     * @memberof PolicyRepresentation
     */
    logic?: Logic;
    /**
     * 
     * @type {DecisionStrategy}
     * @memberof PolicyRepresentation
     */
    decisionStrategy?: DecisionStrategy;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    owner?: string;
    /**
     * 
     * @type {Set<ResourceRepresentation>}
     * @memberof PolicyRepresentation
     */
    resourcesData?: Set<ResourceRepresentation>;
    /**
     * 
     * @type {Set<ScopeRepresentation>}
     * @memberof PolicyRepresentation
     */
    scopesData?: Set<ScopeRepresentation>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PolicyRepresentation
     */
    config?: { [key: string]: string; };
}

/**
 * Check if a given object implements the PolicyRepresentation interface.
 */
export function instanceOfPolicyRepresentation(value: object): boolean {
    return true;
}

export function PolicyRepresentationFromJSON(json: any): PolicyRepresentation {
    return PolicyRepresentationFromJSONTyped(json, false);
}

export function PolicyRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): PolicyRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'type': json['type'] == null ? undefined : json['type'],
        'policies': json['policies'] == null ? undefined : json['policies'],
        'resources': json['resources'] == null ? undefined : json['resources'],
        'scopes': json['scopes'] == null ? undefined : json['scopes'],
        'logic': json['logic'] == null ? undefined : LogicFromJSON(json['logic']),
        'decisionStrategy': json['decisionStrategy'] == null ? undefined : DecisionStrategyFromJSON(json['decisionStrategy']),
        'owner': json['owner'] == null ? undefined : json['owner'],
        'resourcesData': json['resourcesData'] == null ? undefined : new Set((json['resourcesData'] as Array<any>).map(ResourceRepresentationFromJSON)),
        'scopesData': json['scopesData'] == null ? undefined : new Set((json['scopesData'] as Array<any>).map(ScopeRepresentationFromJSON)),
        'config': json['config'] == null ? undefined : json['config'],
    };
}

export function PolicyRepresentationToJSON(value?: PolicyRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'type': value['type'],
        'policies': value['policies'] == null ? undefined : Array.from(value['policies'] as Set<any>),
        'resources': value['resources'] == null ? undefined : Array.from(value['resources'] as Set<any>),
        'scopes': value['scopes'] == null ? undefined : Array.from(value['scopes'] as Set<any>),
        'logic': LogicToJSON(value['logic']),
        'decisionStrategy': DecisionStrategyToJSON(value['decisionStrategy']),
        'owner': value['owner'],
        'resourcesData': value['resourcesData'] == null ? undefined : (Array.from(value['resourcesData'] as Set<any>).map(ResourceRepresentationToJSON)),
        'scopesData': value['scopesData'] == null ? undefined : (Array.from(value['scopesData'] as Set<any>).map(ScopeRepresentationToJSON)),
        'config': value['config'],
    };
}

