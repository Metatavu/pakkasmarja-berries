/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConfigPropertyRepresentation
 */
export interface ConfigPropertyRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ConfigPropertyRepresentation
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigPropertyRepresentation
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigPropertyRepresentation
     */
    helpText?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigPropertyRepresentation
     */
    type?: string;
    /**
     * 
     * @type {any}
     * @memberof ConfigPropertyRepresentation
     */
    defaultValue?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConfigPropertyRepresentation
     */
    options?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigPropertyRepresentation
     */
    secret?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigPropertyRepresentation
     */
    required?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigPropertyRepresentation
     */
    readOnly?: boolean;
}

/**
 * Check if a given object implements the ConfigPropertyRepresentation interface.
 */
export function instanceOfConfigPropertyRepresentation(value: object): boolean {
    return true;
}

export function ConfigPropertyRepresentationFromJSON(json: any): ConfigPropertyRepresentation {
    return ConfigPropertyRepresentationFromJSONTyped(json, false);
}

export function ConfigPropertyRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigPropertyRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'label': json['label'] == null ? undefined : json['label'],
        'helpText': json['helpText'] == null ? undefined : json['helpText'],
        'type': json['type'] == null ? undefined : json['type'],
        'defaultValue': json['defaultValue'] == null ? undefined : json['defaultValue'],
        'options': json['options'] == null ? undefined : json['options'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'required': json['required'] == null ? undefined : json['required'],
        'readOnly': json['readOnly'] == null ? undefined : json['readOnly'],
    };
}

export function ConfigPropertyRepresentationToJSON(value?: ConfigPropertyRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'label': value['label'],
        'helpText': value['helpText'],
        'type': value['type'],
        'defaultValue': value['defaultValue'],
        'options': value['options'],
        'secret': value['secret'],
        'required': value['required'],
        'readOnly': value['readOnly'],
    };
}

