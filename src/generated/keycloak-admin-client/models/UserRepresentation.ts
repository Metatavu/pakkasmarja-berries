/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CredentialRepresentation } from './CredentialRepresentation';
import {
    CredentialRepresentationFromJSON,
    CredentialRepresentationFromJSONTyped,
    CredentialRepresentationToJSON,
} from './CredentialRepresentation';
import type { FederatedIdentityRepresentation } from './FederatedIdentityRepresentation';
import {
    FederatedIdentityRepresentationFromJSON,
    FederatedIdentityRepresentationFromJSONTyped,
    FederatedIdentityRepresentationToJSON,
} from './FederatedIdentityRepresentation';
import type { SocialLinkRepresentation } from './SocialLinkRepresentation';
import {
    SocialLinkRepresentationFromJSON,
    SocialLinkRepresentationFromJSONTyped,
    SocialLinkRepresentationToJSON,
} from './SocialLinkRepresentation';
import type { UserConsentRepresentation } from './UserConsentRepresentation';
import {
    UserConsentRepresentationFromJSON,
    UserConsentRepresentationFromJSONTyped,
    UserConsentRepresentationToJSON,
} from './UserConsentRepresentation';
import type { UserProfileMetadata } from './UserProfileMetadata';
import {
    UserProfileMetadataFromJSON,
    UserProfileMetadataFromJSONTyped,
    UserProfileMetadataToJSON,
} from './UserProfileMetadata';

/**
 * 
 * @export
 * @interface UserRepresentation
 */
export interface UserRepresentation {
    /**
     * 
     * @type {string}
     * @memberof UserRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRepresentation
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRepresentation
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRepresentation
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRepresentation
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRepresentation
     */
    emailVerified?: boolean;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof UserRepresentation
     */
    attributes?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {UserProfileMetadata}
     * @memberof UserRepresentation
     */
    userProfileMetadata?: UserProfileMetadata;
    /**
     * 
     * @type {string}
     * @memberof UserRepresentation
     */
    self?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRepresentation
     */
    origin?: string;
    /**
     * 
     * @type {number}
     * @memberof UserRepresentation
     */
    createdTimestamp?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserRepresentation
     */
    enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRepresentation
     */
    totp?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserRepresentation
     */
    federationLink?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRepresentation
     */
    serviceAccountClientId?: string;
    /**
     * 
     * @type {Array<CredentialRepresentation>}
     * @memberof UserRepresentation
     */
    credentials?: Array<CredentialRepresentation>;
    /**
     * 
     * @type {Set<string>}
     * @memberof UserRepresentation
     */
    disableableCredentialTypes?: Set<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserRepresentation
     */
    requiredActions?: Array<string>;
    /**
     * 
     * @type {Array<FederatedIdentityRepresentation>}
     * @memberof UserRepresentation
     */
    federatedIdentities?: Array<FederatedIdentityRepresentation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserRepresentation
     */
    realmRoles?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof UserRepresentation
     */
    clientRoles?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Array<UserConsentRepresentation>}
     * @memberof UserRepresentation
     */
    clientConsents?: Array<UserConsentRepresentation>;
    /**
     * 
     * @type {number}
     * @memberof UserRepresentation
     */
    notBefore?: number;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof UserRepresentation
     * @deprecated
     */
    applicationRoles?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Array<SocialLinkRepresentation>}
     * @memberof UserRepresentation
     * @deprecated
     */
    socialLinks?: Array<SocialLinkRepresentation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserRepresentation
     */
    groups?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof UserRepresentation
     */
    access?: { [key: string]: boolean; };
}

/**
 * Check if a given object implements the UserRepresentation interface.
 */
export function instanceOfUserRepresentation(value: object): boolean {
    return true;
}

export function UserRepresentationFromJSON(json: any): UserRepresentation {
    return UserRepresentationFromJSONTyped(json, false);
}

export function UserRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'username': json['username'] == null ? undefined : json['username'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'email': json['email'] == null ? undefined : json['email'],
        'emailVerified': json['emailVerified'] == null ? undefined : json['emailVerified'],
        'attributes': json['attributes'] == null ? undefined : json['attributes'],
        'userProfileMetadata': json['userProfileMetadata'] == null ? undefined : UserProfileMetadataFromJSON(json['userProfileMetadata']),
        'self': json['self'] == null ? undefined : json['self'],
        'origin': json['origin'] == null ? undefined : json['origin'],
        'createdTimestamp': json['createdTimestamp'] == null ? undefined : json['createdTimestamp'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'totp': json['totp'] == null ? undefined : json['totp'],
        'federationLink': json['federationLink'] == null ? undefined : json['federationLink'],
        'serviceAccountClientId': json['serviceAccountClientId'] == null ? undefined : json['serviceAccountClientId'],
        'credentials': json['credentials'] == null ? undefined : ((json['credentials'] as Array<any>).map(CredentialRepresentationFromJSON)),
        'disableableCredentialTypes': json['disableableCredentialTypes'] == null ? undefined : json['disableableCredentialTypes'],
        'requiredActions': json['requiredActions'] == null ? undefined : json['requiredActions'],
        'federatedIdentities': json['federatedIdentities'] == null ? undefined : ((json['federatedIdentities'] as Array<any>).map(FederatedIdentityRepresentationFromJSON)),
        'realmRoles': json['realmRoles'] == null ? undefined : json['realmRoles'],
        'clientRoles': json['clientRoles'] == null ? undefined : json['clientRoles'],
        'clientConsents': json['clientConsents'] == null ? undefined : ((json['clientConsents'] as Array<any>).map(UserConsentRepresentationFromJSON)),
        'notBefore': json['notBefore'] == null ? undefined : json['notBefore'],
        'applicationRoles': json['applicationRoles'] == null ? undefined : json['applicationRoles'],
        'socialLinks': json['socialLinks'] == null ? undefined : ((json['socialLinks'] as Array<any>).map(SocialLinkRepresentationFromJSON)),
        'groups': json['groups'] == null ? undefined : json['groups'],
        'access': json['access'] == null ? undefined : json['access'],
    };
}

export function UserRepresentationToJSON(value?: UserRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'username': value['username'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'email': value['email'],
        'emailVerified': value['emailVerified'],
        'attributes': value['attributes'],
        'userProfileMetadata': UserProfileMetadataToJSON(value['userProfileMetadata']),
        'self': value['self'],
        'origin': value['origin'],
        'createdTimestamp': value['createdTimestamp'],
        'enabled': value['enabled'],
        'totp': value['totp'],
        'federationLink': value['federationLink'],
        'serviceAccountClientId': value['serviceAccountClientId'],
        'credentials': value['credentials'] == null ? undefined : ((value['credentials'] as Array<any>).map(CredentialRepresentationToJSON)),
        'disableableCredentialTypes': value['disableableCredentialTypes'] == null ? undefined : Array.from(value['disableableCredentialTypes'] as Set<any>),
        'requiredActions': value['requiredActions'],
        'federatedIdentities': value['federatedIdentities'] == null ? undefined : ((value['federatedIdentities'] as Array<any>).map(FederatedIdentityRepresentationToJSON)),
        'realmRoles': value['realmRoles'],
        'clientRoles': value['clientRoles'],
        'clientConsents': value['clientConsents'] == null ? undefined : ((value['clientConsents'] as Array<any>).map(UserConsentRepresentationToJSON)),
        'notBefore': value['notBefore'],
        'applicationRoles': value['applicationRoles'],
        'socialLinks': value['socialLinks'] == null ? undefined : ((value['socialLinks'] as Array<any>).map(SocialLinkRepresentationToJSON)),
        'groups': value['groups'],
        'access': value['access'],
    };
}

