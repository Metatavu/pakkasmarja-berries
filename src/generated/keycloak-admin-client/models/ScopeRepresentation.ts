/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PolicyRepresentation } from './PolicyRepresentation';
import {
    PolicyRepresentationFromJSON,
    PolicyRepresentationFromJSONTyped,
    PolicyRepresentationToJSON,
} from './PolicyRepresentation';
import type { ResourceRepresentation } from './ResourceRepresentation';
import {
    ResourceRepresentationFromJSON,
    ResourceRepresentationFromJSONTyped,
    ResourceRepresentationToJSON,
} from './ResourceRepresentation';

/**
 * 
 * @export
 * @interface ScopeRepresentation
 */
export interface ScopeRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    iconUri?: string;
    /**
     * 
     * @type {Array<PolicyRepresentation>}
     * @memberof ScopeRepresentation
     */
    policies?: Array<PolicyRepresentation>;
    /**
     * 
     * @type {Array<ResourceRepresentation>}
     * @memberof ScopeRepresentation
     */
    resources?: Array<ResourceRepresentation>;
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    displayName?: string;
}

/**
 * Check if a given object implements the ScopeRepresentation interface.
 */
export function instanceOfScopeRepresentation(value: object): boolean {
    return true;
}

export function ScopeRepresentationFromJSON(json: any): ScopeRepresentation {
    return ScopeRepresentationFromJSONTyped(json, false);
}

export function ScopeRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScopeRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'iconUri': json['iconUri'] == null ? undefined : json['iconUri'],
        'policies': json['policies'] == null ? undefined : ((json['policies'] as Array<any>).map(PolicyRepresentationFromJSON)),
        'resources': json['resources'] == null ? undefined : ((json['resources'] as Array<any>).map(ResourceRepresentationFromJSON)),
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
    };
}

export function ScopeRepresentationToJSON(value?: ScopeRepresentation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'iconUri': value['iconUri'],
        'policies': value['policies'] == null ? undefined : ((value['policies'] as Array<any>).map(PolicyRepresentationToJSON)),
        'resources': value['resources'] == null ? undefined : ((value['resources'] as Array<any>).map(ResourceRepresentationToJSON)),
        'displayName': value['displayName'],
    };
}

